/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelbookingsystem48;

import hotelbookingsystem48.MainView;
import hotelbookingsystem48.View;
import javax.swing.table.DefaultTableModel;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import oracle.jdbc.driver.OracleDriver;
import java.util.Date;
import java.text.SimpleDateFormat;
/**
 *
 * @author jeff-pc
 */
public class CustomerView extends View {

    String actionType;
    /**
     * Creates new form CustomerView
     */
    public CustomerView() {
        initComponents();
        
        setSubFormVisibility(false);
        actionType = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InsertCData = new javax.swing.JButton();
        UpdateData = new javax.swing.JButton();
        DeleteCustomer = new javax.swing.JButton();
        viewCustomer = new javax.swing.JButton();
        rtnButton = new javax.swing.JButton();
        FindCombo = new javax.swing.JButton();
        lblMembTypeSearch = new javax.swing.JLabel();
        ComboCustomer = new javax.swing.JComboBox<>();
        lblCusNumber = new javax.swing.JLabel();
        lblCusTitle = new javax.swing.JLabel();
        lblCFName = new javax.swing.JLabel();
        lblCLName = new javax.swing.JLabel();
        lblCusStreet = new javax.swing.JLabel();
        lblCusDOB = new javax.swing.JLabel();
        lblCusCity = new javax.swing.JLabel();
        lblCusCountry = new javax.swing.JLabel();
        lblCusPost = new javax.swing.JLabel();
        lblMembTier = new javax.swing.JLabel();
        lblMembCredit = new javax.swing.JLabel();
        lblCusPhoneNumber = new javax.swing.JLabel();
        lblCusEmail = new javax.swing.JLabel();
        txtCusNumber = new javax.swing.JTextField();
        txtCusTitle = new javax.swing.JTextField();
        txtCFName = new javax.swing.JTextField();
        txtCLName = new javax.swing.JTextField();
        txtCDOB = new javax.swing.JTextField();
        txtCCountry = new javax.swing.JTextField();
        txtCusCity = new javax.swing.JTextField();
        txtCStreet = new javax.swing.JTextField();
        txtCPost = new javax.swing.JTextField();
        txtMTier = new javax.swing.JTextField();
        txtCMembCredit = new javax.swing.JTextField();
        txtCusPhone = new javax.swing.JTextField();
        txtCusEmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        cusTable = new javax.swing.JTable();
        lblSearchID = new javax.swing.JLabel();
        txtActionID = new javax.swing.JTextField();
        BSearch = new javax.swing.JButton();
        RecordUpdate = new javax.swing.JButton();
        ButtonCreateCommit = new javax.swing.JButton();
        BDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InsertCData.setText("Insert");
        InsertCData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertCDataActionPerformed(evt);
            }
        });

        UpdateData.setText("Update");
        UpdateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateDataActionPerformed(evt);
            }
        });

        DeleteCustomer.setText("Delete");
        DeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCustomerActionPerformed(evt);
            }
        });

        viewCustomer.setText("View Customer");
        viewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCustomerActionPerformed(evt);
            }
        });

        rtnButton.setText("Return");
        rtnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtnButtonActionPerformed(evt);
            }
        });

        FindCombo.setText("Find");
        FindCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindComboActionPerformed(evt);
            }
        });

        lblMembTypeSearch.setText("Membership type");

        ComboCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboCustomerActionPerformed(evt);
            }
        });

        lblCusNumber.setText("Customer Number");

        lblCusTitle.setText("Customer title");

        lblCFName.setText("Customer first name");

        lblCLName.setText("Customer last name");

        lblCusStreet.setText("Customer Street");

        lblCusDOB.setText("Customer DOB");

        lblCusCity.setText("Customer city");

        lblCusCountry.setText("Customer country");

        lblCusPost.setText("Customer postcode");

        lblMembTier.setText("Membership tier");

        lblMembCredit.setText("Customer membership credits");

        lblCusPhoneNumber.setText("Customer phone number");

        lblCusEmail.setText("Customer email");

        txtCPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCPostActionPerformed(evt);
            }
        });

        txtCMembCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCMembCreditActionPerformed(evt);
            }
        });

        txtCusEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCusEmailActionPerformed(evt);
            }
        });

        cusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13"
            }
        ));
        jScrollPane1.setViewportView(cusTable);

        lblSearchID.setText("Enter ID");

        txtActionID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtActionIDActionPerformed(evt);
            }
        });

        BSearch.setText("Search");
        BSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSearchActionPerformed(evt);
            }
        });

        RecordUpdate.setText("Update");
        RecordUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecordUpdateActionPerformed(evt);
            }
        });

        ButtonCreateCommit.setText("Create");
        ButtonCreateCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCreateCommitActionPerformed(evt);
            }
        });

        BDelete.setText("Delete");
        BDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RecordUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BDelete))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblMembTypeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ComboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(FindCombo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rtnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblSearchID)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCLName)
                                    .addComponent(lblCFName))
                                .addComponent(lblCusNumber)
                                .addComponent(lblCusTitle))
                            .addComponent(lblCusCountry, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCusDOB, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCusCity, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(InsertCData, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(DeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtCusCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                                        .addComponent(txtCCountry, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtCDOB, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtCLName, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtCFName, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtCusTitle, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtCusNumber, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addComponent(ButtonCreateCommit))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(viewCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(42, 42, 42)
                                                        .addComponent(lblCusPost))
                                                    .addComponent(lblCusStreet, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtCPost)
                                                    .addComponent(txtCStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblMembCredit)
                                                    .addComponent(lblMembTier, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblCusPhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblCusEmail, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtCusEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtCusPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtCMembCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtMTier, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(UpdateData, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(BSearch)))
                        .addGap(0, 342, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateData)
                    .addComponent(DeleteCustomer)
                    .addComponent(viewCustomer)
                    .addComponent(rtnButton)
                    .addComponent(InsertCData))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FindCombo)
                    .addComponent(lblMembTypeSearch)
                    .addComponent(ComboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchID)
                    .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BSearch))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCusNumber)
                            .addComponent(txtCusNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCusTitle)
                            .addComponent(txtCusTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCFName)
                            .addComponent(txtCFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCLName)
                            .addComponent(txtCLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCusDOB)
                            .addComponent(txtCDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCusCountry)
                            .addComponent(txtCCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCusStreet)
                            .addComponent(txtCStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCusPost)
                            .addComponent(txtCPost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMTier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMembTier))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCMembCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMembCredit))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCusPhoneNumber)
                            .addComponent(txtCusPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCusEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCusEmail))))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCusCity)
                    .addComponent(txtCusCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RecordUpdate)
                            .addComponent(ButtonCreateCommit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(BDelete)
                        .addGap(21, 21, 21)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// inserting data 
    private void InsertCDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertCDataActionPerformed
        clearTable(cusTable);
        setActionType("Create");
        setSubFormVisibility(true);        
        this.lblSearchID.setVisible(false);
        this.txtActionID.setVisible(false);
        this.BSearch.setVisible(false);
        this.lblCusNumber.setEnabled(true);
        this.txtCusNumber.setVisible(true);
        this.lblCusTitle.setVisible(true);
        this.txtCusTitle.setVisible(true);        
        this.lblCFName.setVisible(true);
        this.txtCFName.setVisible(true);
        this.lblCLName.setVisible(true);
        this.txtCLName.setVisible(true);
        this.lblCusDOB.setVisible(true);
        this.txtCDOB.setVisible(true);
        this.lblCusCountry.setVisible(true);
        this.txtCCountry.setVisible(true);
        this.lblCusCity.setVisible(true);
        this.txtCusCity.setVisible(true);
        this.lblCusStreet.setVisible(true);
        this.txtCStreet.setVisible(true);
        this.lblCusPost.setVisible(true);
        this.txtCPost.setVisible(true);
        this.lblMembTier.setVisible(true);
        this.txtMTier.setVisible(true);
        this.lblMembCredit.setVisible(true);
        this.txtCMembCredit.setVisible(true);
        this.lblCusPhoneNumber.setVisible(true);
        this.txtCusPhone.setVisible(true);
        this.lblCusEmail.setVisible(true);
        this.txtCusEmail.setVisible(true);       
        
    }//GEN-LAST:event_InsertCDataActionPerformed
// updating data------------------------- 
    private void UpdateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateDataActionPerformed
        this.txtActionID.setText("");
        clearSubForm();
        
        setSubFormVisibility(false);
        this.clearTable(cusTable);
        setActionType("Update");
        
        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.BSearch.setVisible(true);
        
        this.lblMembTypeSearch.setVisible(false);
        this.ComboCustomer.setVisible(false);
        this.FindCombo.setVisible(false);        
        
    }//GEN-LAST:event_UpdateDataActionPerformed

    private void txtCMembCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCMembCreditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCMembCreditActionPerformed

    private void txtCusEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCusEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCusEmailActionPerformed

    private void txtCPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCPostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCPostActionPerformed
//----------------------------------viewig customer data
    private void viewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCustomerActionPerformed
        
        setSubFormVisibility(false);
        clearTable(cusTable);
        setActionType("Read");
        
        this.FindCombo.setVisible(true);
        this.ComboCustomer.setVisible(true);
        this.lblMembTypeSearch.setVisible(true);
        
        populateComboBox();// method
        /*
        try{
            cusTable.clearSelection();            
            String[] tableColumnsName = {"Customer Numner","Customer title","Customer First Name","Customer Last Name","Customer DOB","Customer Country","Customer city","Customer Street","Customer Postal Code","Membership Tier","Customer Membership Credits","Customer Phone Number","Customer Email"}; 
            DefaultTableModel aModel = (DefaultTableModel) cusTable.getModel();            
            int rowCount = aModel.getRowCount();            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            ResultSet rset;
            rset = getController().getModelBStatement().executeQuery ("Select * From Customer");
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];
                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }                
                aModel.addRow(objects);
            }            
            cusTable.setModel(aModel);            
            rset.close();
            
            System.out.println("Query closed");            
        }catch(Exception e){            
            System.out.println(e.getMessage());
        }*/
    }//GEN-LAST:event_viewCustomerActionPerformed

    public final void populateComboBox(){
        try {
                this.ComboCustomer.removeAllItems();
                this.ComboCustomer.addItem("All");
                ResultSet rset = getController().getModelBStatement().executeQuery("Select distinct membership_tier from Customer");
                while ( rset.next() ) {
                    this.ComboCustomer.addItem(rset.getString(1));
                }
                rset.close();
            }
            catch(SQLException f){
                getController().showPopup("error in connection");
            }
    }
    
    private void rtnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtnButtonActionPerformed
        getController().setView(new MainView(), this);
    }//GEN-LAST:event_rtnButtonActionPerformed
// ---------------------------delete button 
    private void DeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCustomerActionPerformed

        this.txtActionID.setText("");
        clearSubForm();
        
        setSubFormVisibility(false);
        clearTable(cusTable);
        setActionType("Delete");
        
        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.BSearch.setVisible(true);
        
        this.lblMembTypeSearch.setVisible(false);
        this.ComboCustomer.setVisible(false);
        this.FindCombo.setVisible(false); 
       
    }//GEN-LAST:event_DeleteCustomerActionPerformed

    private void ComboCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboCustomerActionPerformed

        
    }//GEN-LAST:event_ComboCustomerActionPerformed
//-------------------------find by button on combo box
    private void FindComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindComboActionPerformed
        try{
            
            ResultSet rset = null;
            
            cusTable.clearSelection();
            String[] tableColumnsName = {"Customer Numner","Customer title","Customer First Name","Customer Last Name","Customer DOB","Customer Country","Customer city","Customer Street","Customer Postal Code","Membership Tier","Customer Membership Credits","Customer Phone Number","Customer Email"}; 
            DefaultTableModel aModel = (DefaultTableModel) cusTable.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);            
            String selChoice = String.valueOf(this.ComboCustomer.getSelectedItem());
            
            if (selChoice.equals("All")){
                rset = getController().getModelBStatement().executeQuery ("Select * From Customer");
            }
            else {
                rset = getController().getModelBStatement().executeQuery ("Select * From Customer where Membership_Tier = '" + selChoice + "'");
            }            
            
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            cusTable.setModel(aModel);            
            rset.close();
            
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute! "+e.getMessage());
        }
    }//GEN-LAST:event_FindComboActionPerformed
    // --------------------for search by ID button ---------------------------
    private void BSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSearchActionPerformed
        
        this.setSubFormVisibility(true);
        this.lblMembTypeSearch.setVisible(false);
        this.ComboCustomer.setVisible(false);
        this.FindCombo.setVisible(false);
        
        try{
            
            ResultSet rset = null;
            int searchID = 0;
            // the dat ayou are entering in the search box, if that box is empty
            if (this.txtActionID.getText().trim().length() == 0){
                getController().showPopup("Customer Number is a required field.");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            try{
                searchID = Integer.parseInt(this.txtActionID.getText().trim());
            }
            catch (NumberFormatException nfe){
                getController().showPopup("Please enter a valid number");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            cusTable.clearSelection();
            String[] tableColumnsName = {"Customer Numner","Customer title","Customer First Name","Customer Last Name","Customer DOB","Customer Country","Customer city","Customer Street","Customer Postal Code","Membership Tier","Customer Membership Credits","Customer Phone Number","Customer Email"}; 
            DefaultTableModel aModel = (DefaultTableModel) cusTable.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Customer where Customer_number = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            cusTable.setModel(aModel);

            rset.close();
            populateSubForm(searchID);
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute! "+e.getMessage());
        }
        
    }//GEN-LAST:event_BSearchActionPerformed
//-----------------------update record after entering data
    private void RecordUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecordUpdateActionPerformed
        
        ResultSet rset = null;
        String strSQL = "";
        int searchID = 0;
        
        if (!validateForm()){
            return;
        };
        
        try{
            searchID = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch (NumberFormatException nfe){
            getController().showPopup("Please enter a valid number");
            this.setSubFormVisibility(false);
            this.setActionType("");
            return;
        }
        
        strSQL = "Update Customer ";
        strSQL += "SET Customer_number = " + this.txtCusNumber.getText().trim() + ", ";
        strSQL += "Customer_title = '" + this.txtCusTitle.getText().trim() + "', ";
        strSQL += "Customer_First_Name = '" + this.txtCFName.getText().trim() + "', ";
        strSQL += "Customer_Last_Name = '" + this.txtCLName.getText().trim() + "', ";
        strSQL += "Customer_DOB = '" + this.txtCDOB.getText().trim() + "', ";
        strSQL += "Customer_Country = '" + this.txtCCountry.getText().trim() + "', ";
        strSQL += "Customer_City = '" + this.txtCusCity.getText().trim() + "', ";
        strSQL += "Customer_Street = '" + this.txtCStreet.getText().trim() + "', ";
        strSQL += "Customer_Postal_Code = '" + this.txtCPost.getText().trim() + "', ";
        strSQL += "Membership_Tier = '" + this.txtMTier.getText().trim() + "', ";
        strSQL += "Customer_Membership_Credits = " + this.txtCMembCredit.getText().trim() + ",";
        strSQL += "Customer_Phone_Number = '" + this.txtCusPhone.getText().trim() + "', ";
        strSQL += "Customer_Email = '" + this.txtCusEmail.getText().trim() + "' ";
        strSQL += "where Customer_number = " + searchID;
        
        try{
            rset = getController().getModelBStatement().executeQuery (strSQL);            
            getController().showPopup("Your Customer table has been updated");
            
            cusTable.clearSelection();
            String[] tableColumnsName = {"Customer Numner","Customer title","Customer First Name","Customer Last Name","Customer DOB","Customer Country","Customer city","Customer Street","Customer Postal Code","Membership Tier","Customer Membership Credits","Customer Phone Number","Customer Email"}; 
            DefaultTableModel aModel = (DefaultTableModel) cusTable.getModel();            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);            
            rset = getController().getModelBStatement().executeQuery ("Select * From Customer where Customer_number = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            cusTable.setModel(aModel);            
            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_RecordUpdateActionPerformed

    private void txtActionIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtActionIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtActionIDActionPerformed
    // -------------------button create commit
    private void ButtonCreateCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCreateCommitActionPerformed
        if (!validateForm()){
            return;
        }
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("select customer_seq.nextval from Customer");
            int id = 0;
            while (rset.next()){
                id = rset.getInt(1);
            }
            rset = getController().getModelBStatement().executeQuery("alter session set global_names = true");
            rset = getController().getModelBStatement().executeQuery ("INSERT INTO Customer Values (" + id + ", " 
                                            + "'" + this.txtCusTitle.getText().trim() 
                                            + "', '" + this.txtCFName.getText().trim()
                                            + "', '" + this.txtCLName.getText()
                                            + "', '" + this.txtCDOB.getText().trim()
                                            + "', '" + this.txtCCountry.getText().trim()
                                            + "', '" + this.txtCusCity.getText().trim()
                                            + "', '" + this.txtCStreet.getText().trim()
                                            + "', '" + this.txtCPost.getText().trim()
                                            + "', '" + this.txtMTier.getText().trim()
                                            + "', " + this.txtCMembCredit.getText().trim()
                                            + ", '" + this.txtCusPhone.getText().trim()
                                            + "', '" + this.txtCusEmail.getText().trim() + "')");
            rset = getController().getModelBStatement().executeQuery("alter session set global_names = false");
            getController().showPopup("Your Customer table has been created");
            
            this.clearSubForm();
            
            cusTable.clearSelection();
            String[] tableColumnsName = {"Customer Numner","Customer title","Customer First Name","Customer Last Name","Customer DOB","Customer Country","Customer city","Customer Street","Customer Postal Code","Membership Tier","Customer Membership Credits","Customer Phone Number","Customer Email"}; 
            DefaultTableModel aModel = (DefaultTableModel) cusTable.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Customer where Customer_number = " + id);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            cusTable.setModel(aModel);            
            rset.close();

        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_ButtonCreateCommitActionPerformed
    //-------------------------------delete button 
    private void BDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDeleteActionPerformed
        int searchID = 0;
        String strSQL = "";
        
        try{
            searchID = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch(NumberFormatException nfe){
            getController().showPopup(nfe.getMessage());
        }
        
        strSQL = "Delete FROM Customer WHERE Customer_number = " + searchID;
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery (strSQL);
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery ("Select * From Customer where Customer_number = " + searchID);
            getController().showPopup("Customer record Deleted");
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        this.txtActionID.setText("");
            
        this.clearTable(cusTable);
        setSubFormVisibility(false);
    }//GEN-LAST:event_BDeleteActionPerformed


    public void clearSubForm(){
            this.txtCCountry.setText("");
            this.txtCDOB.setText("");
            this.txtCFName.setText("");
            this.txtCLName.setText("");
            this.txtCMembCredit.setText("");
            this.txtCPost.setText("");
            this.txtCStreet.setText("");
            this.txtCusCity.setText("");
            this.txtCusEmail.setText("");
            this.txtCusNumber.setText("");
            this.txtCusPhone.setText("");
            this.txtCusTitle.setText("");
            this.txtMTier.setText("");
    }// clear subform 
  
    public void clearTable(JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }// clear table
 
    public String getActionType(){
        return actionType;
    }// get action type
  
    public void populateSubForm(int id){
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select * from Customer where Customer_number = " + id);
            while ( rset.next() ) {
                
                SimpleDateFormat dt1 = new SimpleDateFormat("yyyy-dd-mm HH:dd:ss.s");
                SimpleDateFormat dt2 = new SimpleDateFormat("dd-MMM-yyyy");
                Date date1 = dt1.parse(rset.getString(5));
                String date2 = dt2.format(date1);
                
                this.txtCusNumber.setText(rset.getString(1));
                this.txtCusTitle.setText(rset.getString(2));
                this.txtCFName.setText(rset.getString(3));
                this.txtCLName.setText(rset.getString(4));
                this.txtCDOB.setText(date2);
                this.txtCCountry.setText(rset.getString(6));
                this.txtCusCity.setText(rset.getString(7));
                this.txtCStreet.setText(rset.getString(8));
                this.txtCPost.setText(rset.getString(9));
                this.txtMTier.setText(rset.getString(10));            
                this.txtCMembCredit.setText(rset.getString(11));
                this.txtCusPhone.setText(rset.getString(12));           
                this.txtCusEmail.setText(rset.getString(13));
            }
            rset.close();
        }
        catch (Exception e){
            getController().showPopup(e.getMessage());
        }
    }// populate subform
 
    public void setActionType(String newAct){
        actionType = newAct;
    }// set action type
 
    public void setSubFormVisibility(boolean newVis){
        
        this.lblSearchID.setVisible(newVis);
        this.txtActionID.setVisible(newVis);
        this.BSearch.setVisible(newVis);

        this.lblMembTypeSearch.setVisible(newVis);
        this.ComboCustomer.setVisible(newVis);
        this.FindCombo.setVisible(newVis);
        
        this.lblCusNumber.setVisible(newVis);
        this.txtCusNumber.setVisible(newVis);
        
        this.lblCusTitle.setVisible(newVis);
        this.txtCusTitle.setVisible(newVis);
        
        this.lblCFName.setVisible(newVis);
        this.txtCFName.setVisible(newVis);
        
        this.lblCLName.setVisible(newVis);
        this.txtCLName.setVisible(newVis);
        
        this.lblCusDOB.setVisible(newVis);
        this.txtCDOB.setVisible(newVis);
        
        this.lblCusCountry.setVisible(newVis);
        this.txtCCountry.setVisible(newVis);
        
        this.lblCusCity.setVisible(newVis);
        this.txtCusCity.setVisible(newVis);
        
        this.lblCusStreet.setVisible(newVis);
        this.txtCStreet.setVisible(newVis);
        
        this.lblCusPost.setVisible(newVis);
        this.txtCPost.setVisible(newVis);
        
        this.lblMembTier.setVisible(newVis);
        this.txtMTier.setVisible(newVis);
        
        this.lblMembCredit.setVisible(newVis);
        this.txtCMembCredit.setVisible(newVis);
        
        this.lblCusPhoneNumber.setVisible(newVis);
        this.txtCusPhone.setVisible(newVis);
        
        this.lblCusEmail.setVisible(newVis);
        this.txtCusEmail.setVisible(newVis);
        
        if (newVis){
            if (this.getActionType().equals("Create")){
                this.ButtonCreateCommit.setVisible(newVis);
            }
            else if (this.getActionType().equals("Update")){
                this.RecordUpdate.setVisible(newVis);
            }
            else if (this.getActionType().equals("Delete")){
                this.BDelete.setVisible(newVis);
            }
        }
        else {
            this.RecordUpdate.setVisible(newVis);
            this.BDelete.setVisible(newVis);
            this.ButtonCreateCommit.setVisible(newVis);
        }
        
    }// set sub form closed

    public boolean validateForm(){
        if (this.txtCusNumber.getText().trim().length() == 0){
            getController().showPopup("Customer Number is a required field!");
            return false;
        }
        
        else if (this.txtCusTitle.getText().trim().length() == 0){
            getController().showPopup("Customer title is a required field!");
            return false;
        }
        
        else if (this.txtCFName.getText().trim().length() == 0){
            getController().showPopup("Customer first name is a required field!");
            return false;
        }
        
        else if (this.txtCLName.getText().trim().length() == 0){
            getController().showPopup("Customer last name is a required field!");
            return false;
        }
        
        else if (this.txtCDOB.getText().trim().length() == 0){
            getController().showPopup("Customer DOB is a required field!");
            return false;
        }
        
        else if (this.txtCCountry.getText().trim().length() == 0){
            getController().showPopup("Customer country is a required field!");
            return false;
        }
        
        else if (this.txtCusCity.getText().trim().length() == 0){
            getController().showPopup("Customer city number is a required field!");
            return false;
        }
        
        else if (this.txtCStreet.getText().trim().length() == 0){
            getController().showPopup("Street is a required field!");
            return false;
        }
        
        else if (this.txtCPost.getText().trim().length() == 0){
            getController().showPopup("Post code is a required field!");
            return false;
        }
        
        
        else if (this.txtMTier.getText().trim().length() == 0){
            getController().showPopup("membership tier is a required field!");
            return false;
        }
        
        else if (this.txtCMembCredit.getText().trim().length() == 0){
            getController().showPopup("membership credit is a required field!");
            return false;
        }
        
        else if (this.txtCusPhone.getText().trim().length() == 0){
            getController().showPopup("Phone number is a required field!");
            return false;
        }
        
        else if (this.txtCusEmail.getText().trim().length() == 0){
            getController().showPopup("email is a required field!");
            return false;
        }
        
        else {
            return true;
        }
    }// validate form closed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BDelete;
    private javax.swing.JButton BSearch;
    private javax.swing.JButton ButtonCreateCommit;
    private javax.swing.JComboBox<String> ComboCustomer;
    private javax.swing.JButton DeleteCustomer;
    private javax.swing.JButton FindCombo;
    private javax.swing.JButton InsertCData;
    private javax.swing.JButton RecordUpdate;
    private javax.swing.JButton UpdateData;
    private javax.swing.JTable cusTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCFName;
    private javax.swing.JLabel lblCLName;
    private javax.swing.JLabel lblCusCity;
    private javax.swing.JLabel lblCusCountry;
    private javax.swing.JLabel lblCusDOB;
    private javax.swing.JLabel lblCusEmail;
    private javax.swing.JLabel lblCusNumber;
    private javax.swing.JLabel lblCusPhoneNumber;
    private javax.swing.JLabel lblCusPost;
    private javax.swing.JLabel lblCusStreet;
    private javax.swing.JLabel lblCusTitle;
    private javax.swing.JLabel lblMembCredit;
    private javax.swing.JLabel lblMembTier;
    private javax.swing.JLabel lblMembTypeSearch;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JButton rtnButton;
    private javax.swing.JTextField txtActionID;
    private javax.swing.JTextField txtCCountry;
    private javax.swing.JTextField txtCDOB;
    private javax.swing.JTextField txtCFName;
    private javax.swing.JTextField txtCLName;
    private javax.swing.JTextField txtCMembCredit;
    private javax.swing.JTextField txtCPost;
    private javax.swing.JTextField txtCStreet;
    private javax.swing.JTextField txtCusCity;
    private javax.swing.JTextField txtCusEmail;
    private javax.swing.JTextField txtCusNumber;
    private javax.swing.JTextField txtCusPhone;
    private javax.swing.JTextField txtCusTitle;
    private javax.swing.JTextField txtMTier;
    private javax.swing.JButton viewCustomer;
    // End of variables declaration//GEN-END:variables
}
