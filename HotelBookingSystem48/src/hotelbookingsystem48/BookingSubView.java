/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelbookingsystem48;

import java.sql.ResultSet;
import javax.swing.DefaultListModel;
import java.util.ArrayList;

/**
 *
 * @author jeff-pc
 */
public class BookingSubView extends View {

    private int bookID;
    
    /**
     * Creates new form BookingSubView
     */
    public BookingSubView() {
        initComponents();
    }
    
    public BookingSubView(int newBook){
        initComponents();
        bookID = newBook;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtBookingID = new javax.swing.JTextField();
        btnGetStarted = new javax.swing.JButton();
        cboRoom = new javax.swing.JComboBox<>();
        lblRoom = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstGuest = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnAddCont = new javax.swing.JButton();
        btnSaveQuit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtBookingID.setEnabled(false);

        btnGetStarted.setText("Load Available Rooms");
        btnGetStarted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetStartedActionPerformed(evt);
            }
        });

        lblRoom.setText("Room");

        jScrollPane1.setViewportView(lstGuest);

        jLabel1.setText("Guest");
        jLabel1.setToolTipText("");

        btnAddCont.setText("Save Add Again");
        btnAddCont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddContActionPerformed(evt);
            }
        });

        btnSaveQuit.setText("Save And Exit");
        btnSaveQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveQuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtBookingID, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGetStarted))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRoom, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(cboRoom, 0, 136, Short.MAX_VALUE))
                        .addGap(53, 53, 53))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddCont)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(btnSaveQuit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookingID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGetStarted))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCont)
                    .addComponent(btnSaveQuit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetStartedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStartedActionPerformed
        // TODO add your handling code here:
        initializeForm();
        btnGetStarted.setVisible(false);
    }//GEN-LAST:event_btnGetStartedActionPerformed

    private void btnAddContActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddContActionPerformed
        // TODO add your handling code here:
        
        if (lstGuest.isSelectionEmpty()){
            getController().showPopup("At least one guest is required!");
            return;
        }
        
        int currAdd = 0;
        for (String single : lstGuest.getSelectedValuesList()){
            try{
                int maxOcc = 0;
                ResultSet rset = getController().getModelBStatement().executeQuery("Select Room_Max_Occupancy From Room Where Room_Number = '" + String.valueOf(this.cboRoom.getSelectedItem()) + "'");
                
                while (rset.next()){
                    maxOcc = Integer.parseInt(rset.getString(1));
                }
                
                if (lstGuest.getSelectedValuesList().size() > maxOcc){
                    getController().showPopup("You have exceeded the room capacity");
                    break;
                }
                
                if (currAdd <= maxOcc){
                    rset = getController().getModelBStatement().executeQuery("INSERT INTO Booking_Room_Guest Values (" + bookID + ", '" + String.valueOf(this.cboRoom.getSelectedItem()) + "', " + single + ")");
                    rset.close();
                }
                
                getController().showPopup("Your Booking has been added");
                lstGuest.clearSelection();
                
            }
            catch(Exception e){
                getController().showPopup(e.getMessage());
            }
            
        }
        
    }//GEN-LAST:event_btnAddContActionPerformed

    private void btnSaveQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveQuitActionPerformed
        // TODO add your handling code here:
        
        boolean checkValue = true;
        
        if (lstGuest.isSelectionEmpty()){
            getController().showPopup("At least one guest is required!");
            return;
        }
        
        int currAdd = 0;
        for (String single : lstGuest.getSelectedValuesList()){
            try{
                int maxOcc = 0;
                ResultSet rset = getController().getModelBStatement().executeQuery("Select Room_Max_Occupancy From Room Where Room_Number = '" + String.valueOf(this.cboRoom.getSelectedItem()) + "'");
                
                while (rset.next()){
                    maxOcc = Integer.parseInt(rset.getString(1));
                }
                
                if (lstGuest.getSelectedValuesList().size() > maxOcc){
                    getController().showPopup("You have exceeded the room capacity");
                    checkValue = false;
                    break;
                }
                
                if (currAdd <= maxOcc){
                    rset = getController().getModelBStatement().executeQuery("INSERT INTO Booking_Room_Guest Values (" + bookID + ", '" + String.valueOf(this.cboRoom.getSelectedItem()) + "', " + single + ")");
                    rset.close();
                }
            }
            catch(Exception e){
                getController().showPopup(e.getMessage());
            }
        }
        
        if(checkValue){
            getController().showPopup("Your Booking has been added");
            getController().setView(new BookingView(), this);
        }
    }//GEN-LAST:event_btnSaveQuitActionPerformed

    public void initializeForm(){
        
        DefaultListModel listModel = new DefaultListModel();
        
        this.txtBookingID.setText(Integer.toString(bookID));
        
        
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select Distinct room_number from room");
            
            while (rset.next()){
                for (int i = 0; i < rset.getMetaData().getColumnCount(); i++){
                    cboRoom.addItem(rset.getString(i + 1));
                }
            }
            
            rset = getController().getModelBStatement().executeQuery("Select Distinct guest_number from guest");
            
            while (rset.next()){
                for (int i = 0; i < rset.getMetaData().getColumnCount(); i++){
                    listModel.addElement(rset.getString(i + 1));
                }
            }
            
            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        this.lstGuest.setModel(listModel);
        lstGuest.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCont;
    private javax.swing.JButton btnGetStarted;
    private javax.swing.JButton btnSaveQuit;
    private javax.swing.JComboBox<String> cboRoom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRoom;
    private javax.swing.JList<String> lstGuest;
    private javax.swing.JTextField txtBookingID;
    // End of variables declaration//GEN-END:variables
}
