/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelbookingsystem48;

import hotelbookingsystem48.MainView;
import hotelbookingsystem48.View;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import oracle.jdbc.driver.OracleDriver;
/**
 *
 * @author jeff-pc
 */
public class PaymentView extends View {

    
    String actionType;
   
    /**
     * Creates new form PaymentView
     */
    public PaymentView() {
        initComponents();
        setSubFormVisibility(false);
        actionType = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnViewPayment = new javax.swing.JButton();
        btnMPayment = new javax.swing.JButton();
        btnDPayment = new javax.swing.JButton();
        btnRButton = new javax.swing.JButton();
        txtPayID = new javax.swing.JTextField();
        txtPayMethod = new javax.swing.JTextField();
        txtPayAmount = new javax.swing.JTextField();
        txtBookID = new javax.swing.JTextField();
        txtPayDate = new javax.swing.JTextField();
        lblpayID = new javax.swing.JLabel();
        lblBookID = new javax.swing.JLabel();
        lblPayMethod = new javax.swing.JLabel();
        lblPayDate = new javax.swing.JLabel();
        lblPayAmount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PayTable = new javax.swing.JTable();
        lblsearchLabel = new javax.swing.JLabel();
        txtsearchID = new javax.swing.JTextField();
        btnSById = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        btnCreate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnViewUnpaids = new javax.swing.JButton();
        cboCustomer = new javax.swing.JComboBox<>();
        lblCustomer = new javax.swing.JLabel();
        btnExecuteSearch = new javax.swing.JButton();
        btnSearchByCustomer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnViewPayment.setText("View Payment");
        btnViewPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPaymentActionPerformed(evt);
            }
        });

        btnMPayment.setText("Make Payment");
        btnMPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMPaymentActionPerformed(evt);
            }
        });

        btnDPayment.setText("Delete Payment");
        btnDPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDPaymentActionPerformed(evt);
            }
        });

        btnRButton.setText("Return");
        btnRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRButtonActionPerformed(evt);
            }
        });

        lblpayID.setText("Payment ID");

        lblBookID.setText("Booking ID");

        lblPayMethod.setText("Payment method");

        lblPayDate.setText("Payment Date");

        lblPayAmount.setText("Payment amount");

        PayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(PayTable);

        lblsearchLabel.setText("Enter ID");

        btnSById.setText("Search");
        btnSById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSByIdActionPerformed(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane2.setViewportView(txtArea);

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnViewUnpaids.setText("View Unpaid Bookings");
        btnViewUnpaids.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewUnpaidsActionPerformed(evt);
            }
        });

        lblCustomer.setText("Select Customer");

        btnExecuteSearch.setText("Search");
        btnExecuteSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteSearchActionPerformed(evt);
            }
        });

        btnSearchByCustomer.setText("View By Customer");
        btnSearchByCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByCustomerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblsearchLabel)
                    .addComponent(btnViewUnpaids, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnMPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnViewPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchByCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(btnRButton)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(txtsearchID, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSById))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblBookID)
                                    .addComponent(lblpayID)
                                    .addComponent(lblPayMethod)
                                    .addComponent(lblPayDate)
                                    .addComponent(lblPayAmount))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPayID, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                        .addGap(142, 142, 142))
                                    .addComponent(txtBookID)
                                    .addComponent(txtPayMethod)
                                    .addComponent(txtPayDate)
                                    .addComponent(txtPayAmount))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(59, 59, 59)
                                        .addComponent(btnCreate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDelete))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap())))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(lblCustomer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExecuteSearch)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMPayment)
                    .addComponent(btnDPayment)
                    .addComponent(btnRButton)
                    .addComponent(btnViewPayment)
                    .addComponent(btnViewUnpaids)
                    .addComponent(btnSearchByCustomer))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblsearchLabel)
                    .addComponent(txtsearchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSById)
                    .addComponent(cboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomer)
                    .addComponent(btnExecuteSearch))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPayID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblpayID))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookID))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPayDate)
                    .addComponent(txtPayDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPayMethod)
                    .addComponent(txtPayMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPayAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPayAmount)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRButtonActionPerformed
        getController().setView(new MainView(), this);
    }//GEN-LAST:event_btnRButtonActionPerformed

    private void btnViewPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPaymentActionPerformed
        /*
        setSubFormVisibility(false);
        clearTable(PayTable);
        setActionType("Read");
        
        this.btnBFind.setVisible(true);
        this.payComboBox.setVisible(true);
        this.lblcombo.setVisible(true);
        
        populateComboBox();// method
        
        */
        try{
            PayTable.clearSelection();
            String[] tableColumnsName = {"Payment ID", "Booking ID", "Payment Date", "Payment Method", "Payment Amount"}; 
            DefaultTableModel aModel = (DefaultTableModel) PayTable.getModel();
            
            int rowCount = aModel.getRowCount();            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }            
            aModel.setColumnIdentifiers(tableColumnsName); 
            ResultSet rset;
            rset = getController().getModelBStatement().executeQuery ("Select * From Payment");            
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }            
            PayTable.setModel(aModel);            
            rset.close();

            System.out.println("Query closed");
        }
        catch(Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnViewPaymentActionPerformed

// //-----------------------------button for making a payment
    private void btnMPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMPaymentActionPerformed
        clearTable(PayTable);
        setActionType("Create");
        setSubFormVisibility(true);
        
        this.lblsearchLabel.setVisible(false);
        this.txtsearchID.setVisible(false);
        this.btnSById.setVisible(false);
       // this.btnUpdate.setVisible(false);
        this.btnDelete.setVisible(false);
        this.btnCreate.setVisible(true);// create button 
    }//GEN-LAST:event_btnMPaymentActionPerformed
    // ------------------------delete payment button
    private void btnDPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDPaymentActionPerformed
        this.lblsearchLabel.setText("");
        clearSubForm();
        
        setSubFormVisibility(false);
        clearTable(PayTable);
        setActionType("Delete");
        
        this.lblsearchLabel.setVisible(true);
        this.txtsearchID.setVisible(true);
        this.btnSById.setVisible(true);
        
    }//GEN-LAST:event_btnDPaymentActionPerformed

   // ----------------------------------search button 
    private void btnSByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSByIdActionPerformed
        
        this.setSubFormVisibility(true);
        
        try{
            
            ResultSet rset = null;
            int searchID = 0;
            // the dat you are entering in the search box, if that box is empty
            if (this.txtsearchID.getText().trim().length() == 0){
                getController().showPopup("This is a required field.");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            try{
                searchID = Integer.parseInt(this.txtsearchID.getText().trim());
            }
            catch (NumberFormatException nfe){
                getController().showPopup("Please enter a valid number");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            PayTable.clearSelection();
            String[] tableColumnsName = {"Payment_ID","Booking_ID","Payment_Date","payment_method","payment_amount"};             
            DefaultTableModel aModel = (DefaultTableModel) PayTable.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Payment where Payment_ID = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            PayTable.setModel(aModel);

            rset.close();
            populateSubForm(searchID);
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute! "+e.getMessage());
        }
        
    }//GEN-LAST:event_btnSByIdActionPerformed

   //----------------------button that will create a table
    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        
        if (!validateForm()){
            return;
        }
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("select payment_seq.nextval from Payment");
            int id = 0;
            while (rset.next()){
                id = rset.getInt(1);
            }
            rset = getController().getModelBStatement().executeQuery ("INSERT INTO Payment Values (" + id + "," 

                                            + this.txtBookID.getText().trim() 
                                            + ", '" + this.txtPayDate.getText().trim()
                                            + "', '" + this.txtPayMethod.getText().trim()
                                            + "', " + this.txtPayAmount.getText().trim() + ")");

            int oldValue = 0, custNum = 0, newValue = Integer.parseInt(this.txtPayAmount.getText().trim()), addValue = 0;
            rset = getController().getModelBStatement().executeQuery("Select c.customer_membership_credits from customer c, booking b, payment p where c.customer_number = b.customer_number And b.booking_id = p.booking_id and b.booking_id = "+ this.txtBookID.getText().trim());
            
            while (rset.next()){
                oldValue = Integer.parseInt(rset.getString(1));
            }
            
            rset = getController().getModelBStatement().executeQuery("Select c.customer_number from customer c, booking b where c.customer_number = b.customer_number And b.booking_id = " + this.txtBookID.getText().trim());
            
            while (rset.next()){
                custNum = Integer.parseInt(rset.getString(1));
            }
            
            addValue = oldValue + newValue;
            
            String strSQL = "Update Customer Set customer_membership_credits = " + addValue + " Where customer_number = " + custNum;
            rset = getController().getModelBStatement().executeQuery(strSQL);
            rset = getController().getModelBStatement().executeQuery("Update booking Set booking_payment_status = 1 Where booking_ID = " + this.txtBookID.getText().trim());
            rset = getController().getModelBStatement().executeQuery("commit");
            
            getController().showPopup("Your Payment has been created");
            
            this.clearSubForm();            
            PayTable.clearSelection();
            String[] tableColumnsName = {"Payment ID","Booking ID","Payment Date","payment Method","payment Amount"}; 
            DefaultTableModel aModel = (DefaultTableModel) PayTable.getModel();
            
            int rowCount = aModel.getRowCount();            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);            
            rset = getController().getModelBStatement().executeQuery("Select * From Payment where Payment_ID = " + id);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }                
                aModel.addRow(objects);
            }            
            PayTable.setModel(aModel);            
            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
/*        if (!validateForm()){
            return;
        }
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("select payment_seq.nextval from Payment");
            int id = 0;
            while (rset.next()){
                id = rset.getInt(1);
            }
            rset = getController().getModelBStatement().executeQuery("alter session set global_names = true");
            rset = getController().getModelBStatement().executeQuery ("INSERT INTO Payment Values (" + id + ", '" 
                                            + this.txtPayID.getText().trim() 
                                            + "', '" + this.txtBookID.getText().trim() 
                                            + "', '" + this.txtPayDate.getText().trim()
                                            + "', '" + this.txtPayMethod.getText().trim()
                                            + "', '" + this.txtPayAmount.getText().trim() + "')");
            rset = getController().getModelBStatement().executeQuery("alter session set global_names = false");
            getController().showPopup("Your Payment table has been created");
            
            this.clearSubForm();
            
            PayTable.clearSelection();
            String[] tableColumnsName = {"Payment ID","Booking ID","Payment Date","payment Method","payment Amount"}; 
            DefaultTableModel aModel = (DefaultTableModel) PayTable.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Payment where Payment_ID = " + id);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            PayTable.setModel(aModel);            
            rset.close();

        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }*/

    }//GEN-LAST:event_btnCreateActionPerformed

   //------------------------Delete Button
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int searchID = 0;
        String strSQL = "";
        
        try{
            searchID = Integer.parseInt(this.txtsearchID.getText().trim());
        }
        catch(NumberFormatException nfe){
            getController().showPopup(nfe.getMessage());
        }
        
        strSQL = "Delete FROM Payment WHERE Payment_ID = " + searchID;
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery (strSQL);
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        int oldValue = 0, custNum = 0, newValue = Integer.parseInt(this.txtPayAmount.getText().trim()), addValue = 0;
            try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select c.customer_membership_credits from customer c, booking b, payment p where c.customer_number = b.customer_number And b.booking_id = p.booking_id and b.booking_id = "+ this.txtBookID.getText().trim());
            
            while (rset.next()){
                oldValue = Integer.parseInt(rset.getString(1));
            }
            
            rset = getController().getModelBStatement().executeQuery("Select c.customer_number from customer c, booking b where c.customer_number = b.customer_number And b.booking_id = " + this.txtBookID.getText().trim());
            
            while (rset.next()){
                custNum = Integer.parseInt(rset.getString(1));
            }
            
                addValue = oldValue - newValue;
            
                strSQL = "Update Customer Set customer_membership_credits = " + addValue + " Where customer_number = " + custNum;
                rset = getController().getModelBStatement().executeQuery(strSQL);
                rset = getController().getModelBStatement().executeQuery("Update booking Set booking_payment_status = 1 Where booking_ID = " + this.txtBookID.getText().trim());
                rset = getController().getModelBStatement().executeQuery("commit");
            }
            catch (Exception e){
                getController().showPopup(e.getMessage());
            }
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery ("Select * From Payment where Payment_ID = " + searchID);
            getController().showPopup("Customer record Deleted");
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        this.txtsearchID.setText("");
            
        this.clearTable(PayTable);
        setSubFormVisibility(false);
   
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewUnpaidsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewUnpaidsActionPerformed
        // TODO add your handling code here:
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select * From Booking Where Booking_Payment_Status = 0");
           
            PayTable.clearSelection();
            String[] tableColumnsName = {"Booking ID","Customer Number","Check In","Check Out","Contact Person","Contact Email","Total Amount","Payment Status"}; 
            DefaultTableModel aModel = (DefaultTableModel) PayTable.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            PayTable.setModel(aModel);
            
            rset.close();
        }
        catch (Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_btnViewUnpaidsActionPerformed

    private void btnExecuteSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteSearchActionPerformed
        // TODO add your handling code here:
        
        try{
            ResultSet rset;
                    
            if (String.valueOf(cboCustomer.getSelectedItem()).equals("All")){
                rset = getController().getModelBStatement().executeQuery("Select * from payment");
            }
            else{
                rset = getController().getModelBStatement().executeQuery("Select * from payment p, booking b, customer c where p.booking_id = b.booking_id And b.customer_number = c.customer_number And c.customer_number = " + String.valueOf(cboCustomer.getSelectedItem()));
            }

            
            PayTable.clearSelection();
            String[] tableColumnsName = {"Payment ID","Booking ID","Payment Date","Payment Method","Payment Amount"}; 
            DefaultTableModel aModel = (DefaultTableModel) PayTable.getModel();            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);            

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            PayTable.setModel(aModel);            
            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_btnExecuteSearchActionPerformed

    private void btnSearchByCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByCustomerActionPerformed
        // TODO add your handling code here:
        this.lblCustomer.setVisible(true);
        this.cboCustomer.setVisible(true);
        this.btnExecuteSearch.setVisible(true);
        this.populateList();
        
    }//GEN-LAST:event_btnSearchByCustomerActionPerformed


    public void clearSubForm(){
            //this.txtsearchID.setText("");
            this.txtPayID.setText("");
            this.txtBookID.setText("");
            this.txtPayDate.setText("");
            this.txtPayMethod.setText("");
            this.txtPayAmount.setText("");            
    }// clear subform 
  
    public void clearTable(JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }// clear table
 
    public String getActionType(){
        return actionType;
    }// get action type
  
    public void populateSubForm(int id){
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select * from Payment where payment_id = " + id);
            while ( rset.next() ) {
                this.txtPayID.setText(rset.getString(1));
                this.txtBookID.setText(rset.getString(2));
                this.txtPayDate.setText(rset.getString(3));
                this.txtPayMethod.setText(rset.getString(4));
                this.txtPayAmount.setText(rset.getString(5));
            }
            rset.close();
        }
        catch (Exception e){
            getController().showPopup(e.getMessage());
        }
    }// populate subform
 
    public void setActionType(String newAct){
        actionType = newAct;
    }// set action type
 
    public void setSubFormVisibility(boolean newVis){
        
        this.lblsearchLabel.setVisible(newVis);
        this.txtsearchID.setVisible(newVis);
        this.btnSById.setVisible(newVis);
        
        this.lblCustomer.setVisible(newVis);
        this.cboCustomer.setVisible(newVis);
        this.btnExecuteSearch.setVisible(newVis);
        
        this.lblpayID.setVisible(newVis);
        this.txtPayID.setVisible(newVis);
        
        this.lblBookID.setVisible(newVis);
        this.txtBookID.setVisible(newVis);
        
        this.lblPayDate.setVisible(newVis);
        this.txtPayDate.setVisible(newVis);
        
        this.lblPayMethod.setVisible(newVis);
        this.txtPayMethod.setVisible(newVis);
        
        this.lblPayAmount.setVisible(newVis);
        this.txtPayAmount.setVisible(newVis);
        
                
        if (newVis){
            if (this.getActionType().equals("Create")){
                this.btnCreate.setVisible(newVis);
            }
            //else if (this.getActionType().equals("Update")){
             //   this.btnUpdate.setVisible(newVis);
            //}
            else if (this.getActionType().equals("Delete")){
                this.btnDelete.setVisible(newVis);
            }
        }
        else {
            this.btnCreate.setVisible(newVis);
            //this.btnUpdate.setVisible(newVis);
            this.btnDelete.setVisible(newVis);
        }
        
    }// set sub form closed

    public void populateList(){
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select distinct customer_number from customer");
            
            this.cboCustomer.removeAllItems();
            
            this.cboCustomer.addItem("All");
            
            while (rset.next()){
                for (int i = 0; i < rset.getMetaData().getColumnCount(); i++){
                    this.cboCustomer.addItem(rset.getString(1 + i));
                }
            }
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
    }
    
    public boolean validateForm(){
        if (this.txtPayID.getText().trim().length() == 0){
            getController().showPopup("Payment ID is a required field!");
            return false;
        }
        
        else if (this.txtBookID.getText().trim().length() == 0){
            getController().showPopup("Booking ID is a required field!");
            return false;
        }
        
        else if (this.txtPayDate.getText().trim().length() == 0){
            getController().showPopup("Payment Date is a required field!");
            return false;
        }
        
        else if (this.txtPayMethod.getText().trim().length() == 0){
            getController().showPopup("PayMethod is a required field!");
            return false;
        }
        
        else if (this.txtPayAmount.getText().trim().length() == 0){
            getController().showPopup("Payment Amount is a required field!");
            return false;
        }        
        else {
            return true;
        }
    }// validate form closed
    
    public final void populateComboBox(){
        try {
                this.cboCustomer.removeAllItems();
                this.cboCustomer.addItem("All");
                ResultSet rset = getController().getModelBStatement().executeQuery("Select distinct payment_id from Payment");
                while ( rset.next() ) {
                    this.cboCustomer.addItem(rset.getString(1));
                }
                rset.close();
            }
            catch(SQLException e){
                getController().showPopup(e.getMessage());
            }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PayTable;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDPayment;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExecuteSearch;
    private javax.swing.JButton btnMPayment;
    private javax.swing.JButton btnRButton;
    private javax.swing.JButton btnSById;
    private javax.swing.JButton btnSearchByCustomer;
    private javax.swing.JButton btnViewPayment;
    private javax.swing.JButton btnViewUnpaids;
    private javax.swing.JComboBox<String> cboCustomer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBookID;
    private javax.swing.JLabel lblCustomer;
    private javax.swing.JLabel lblPayAmount;
    private javax.swing.JLabel lblPayDate;
    private javax.swing.JLabel lblPayMethod;
    private javax.swing.JLabel lblpayID;
    private javax.swing.JLabel lblsearchLabel;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtPayAmount;
    private javax.swing.JTextField txtPayDate;
    private javax.swing.JTextField txtPayID;
    private javax.swing.JTextField txtPayMethod;
    private javax.swing.JTextField txtsearchID;
    // End of variables declaration//GEN-END:variables
}
