/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelbookingsystem48;


import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JTextField;


/**
 * This is the Membership view for the hotel booking system.
 * 
 * @author Jeffrey Middendorf
 * @version 1.0
 * @since 2/4/2017
 */
public class MembershipView extends View {

    String actionType;
    
    /**
     * Creates new form MemberView
     */
    public MembershipView() {
        initComponents();
        //populateComboBox();
        setSubFormVisibility(false);
        actionType = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        btnFindByType = new javax.swing.JButton();
        lblSearchText = new javax.swing.JLabel();
        lblSearchID = new javax.swing.JLabel();
        txtActionID = new javax.swing.JTextField();
        txtMembershipTier = new javax.swing.JTextField();
        lblMembershipTier = new javax.swing.JLabel();
        lblMembershipTierCredit = new javax.swing.JLabel();
        txtMembershipTierCredits = new javax.swing.JTextField();
        btnCommitUpdate = new javax.swing.JButton();
        btnDeleteRecord = new javax.swing.JButton();
        txtMembershipDiscount = new javax.swing.JTextField();
        lblMembershipDiscount = new javax.swing.JLabel();
        txtMembershipReward = new javax.swing.JTextField();
        lblMembershipReward = new javax.swing.JLabel();
        btnFindAction = new javax.swing.JButton();
        btnCreateCommit = new javax.swing.JButton();
        txtAvailCreds = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tier", "Credits", "Discount", "Reward"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblResults.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblResults);

        btnCreate.setText("Add A Membership");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update a Membership");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete a Membership");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Read Membership");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnFindByType.setText("Find");
        btnFindByType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByTypeActionPerformed(evt);
            }
        });

        lblSearchText.setText("Available Credits");

        lblSearchID.setLabelFor(txtActionID);
        lblSearchID.setText("Enter ID");

        lblMembershipTier.setLabelFor(txtMembershipTier);
        lblMembershipTier.setText("Tier");

        lblMembershipTierCredit.setLabelFor(txtMembershipTierCredits);
        lblMembershipTierCredit.setText("Tier Credit");

        btnCommitUpdate.setText("Update");
        btnCommitUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommitUpdateActionPerformed(evt);
            }
        });

        btnDeleteRecord.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteRecord.setText("Delete");
        btnDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRecordActionPerformed(evt);
            }
        });

        txtMembershipDiscount.setToolTipText("");

        lblMembershipDiscount.setLabelFor(txtMembershipDiscount);
        lblMembershipDiscount.setText("Discount");

        lblMembershipReward.setLabelFor(txtMembershipReward);
        lblMembershipReward.setText("Reward");

        btnFindAction.setText("Find");
        btnFindAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionActionPerformed(evt);
            }
        });

        btnCreateCommit.setText("Create");
        btnCreateCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCommitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSearchText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAvailCreds, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFindByType, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReturn))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearchID)
                        .addGap(4, 4, 4)
                        .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblMembershipTier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMembershipTierCredit, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtMembershipTierCredits))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtMembershipTier, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 413, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMembershipDiscount, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblMembershipReward, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMembershipDiscount)
                            .addComponent(txtMembershipReward, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFindAction)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnCommitUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreateCommit)
                .addGap(278, 278, 278)
                .addComponent(btnDeleteRecord))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(btnCreate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFindByType)
                    .addComponent(lblSearchID)
                    .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFindAction)
                    .addComponent(txtAvailCreds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMembershipTier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMembershipTier))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMembershipTierCredit)
                            .addComponent(txtMembershipTierCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMembershipDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMembershipDiscount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMembershipReward, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMembershipReward))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCommitUpdate)
                    .addComponent(btnDeleteRecord)
                    .addComponent(btnCreateCommit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        this.txtActionID.setText("");
        clearSubForm();
        
        setSubFormVisibility(false);
        this.clearTable(tblResults);
        setActionType("Update");
        
        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.btnFindAction.setVisible(true);
        
        this.lblSearchText.setVisible(false);
        this.txtAvailCreds.setVisible(false);
        this.btnFindByType.setVisible(false);
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        getController().setView(new MainView(), this);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        clearTable(tblResults);
        setActionType("Create");
        setSubFormVisibility(true);
        
        this.lblSearchID.setVisible(false);
        this.txtActionID.setVisible(false);
        this.btnFindAction.setVisible(false);

        this.lblSearchText.setVisible(false);
        this.txtAvailCreds.setVisible(false);
        this.btnFindByType.setVisible(false);
        
        this.btnCommitUpdate.setVisible(false);
        this.btnDeleteRecord.setVisible(false);
        this.btnCreateCommit.setVisible(true);
        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        setSubFormVisibility(false);
        clearTable(tblResults);
        setActionType("Read");
        
        this.lblSearchText.setVisible(true);
        this.txtAvailCreds.setVisible(true);
        this.btnFindByType.setVisible(true);
        
        ResultSet rset = null;
        
        try{
            tblResults.clearSelection();
            String[] tableColumnsName = {"Tier","Credit","Discount","Reward"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            String selChoice = this.txtAvailCreds.getText().trim();
            
            rset = getController().getModelBStatement().executeQuery ("Select * from membership");
            
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnFindByTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByTypeActionPerformed
        // TODO add your handling code here:
        
        if (this.txtAvailCreds.getText().trim().length() == 0){
            getController().showPopup("Available credits is a required field!");
            this.setSubFormVisibility(false);
            this.setActionType("");
            return;
        }
        
        try{
            
            ResultSet rset = null;
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Tier","Credit","Discount","Reward"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            String selChoice = this.txtAvailCreds.getText().trim();
            
            rset = getController().getModelBStatement().executeQuery ("Select * From membership where membership_tier_credits = (Select max(membership_Tier_credits) from membership where membership_tier_credits in (select Membership_tier_credits from membership where membership_tier_credits <= " + selChoice + "))");
            
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();
            
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }
    }//GEN-LAST:event_btnFindByTypeActionPerformed

    private void btnFindActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionActionPerformed
        // TODO add your handling code here:
        
        this.setSubFormVisibility(true);
        this.lblSearchText.setVisible(false);
        this.txtAvailCreds.setVisible(false);
        this.btnFindByType.setVisible(false);
        
        try{
            
            ResultSet rset = null;
            String searchID = "";
            
            if (this.txtActionID.getText().trim().length() == 0){
                getController().showPopup("Membership Tier is a required field.");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            searchID = this.txtActionID.getText().trim();
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Tier","Credit","Discount","Reward"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Membership where membership_tier = '" + searchID + "'");

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);

            rset.close();
            populateSubForm(searchID);
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }
        
    }//GEN-LAST:event_btnFindActionActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.txtActionID.setText("");
        clearSubForm();
        
        setSubFormVisibility(false);
        clearTable(tblResults);
        setActionType("Delete");
        
        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.btnFindAction.setVisible(true);
        
        this.lblSearchText.setVisible(false);
        this.txtAvailCreds.setVisible(false);
        this.btnFindByType.setVisible(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCreateCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCommitActionPerformed
        // TODO add your handling code here:
        
        ResultSet rset = null;
        
        if (!validateForm()){
            return;
        }
        
        if (!validateDiscount(this.txtMembershipDiscount.getText().trim())){
            return;
        }
        
        try{
            rset = getController().getModelBStatement().executeQuery ("INSERT INTO Membership Values ('"
                                            + this.txtMembershipTier.getText().trim() + "', "
                                            + this.txtMembershipTierCredits.getText().trim() + ", "
                                            + this.txtMembershipDiscount.getText().trim() + ", "
                                            + "'" + this.txtMembershipReward.getText().trim() + "')");
            getController().showPopup("Your new membership level has been created");
            
            this.clearSubForm();
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Tier","Credit","Discount","Reward"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Membership where Membership_tier = '" + this.txtMembershipTier.getText().trim() + "'");

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();

        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_btnCreateCommitActionPerformed

    private void btnCommitUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommitUpdateActionPerformed
        // TODO add your handling code here:
        ResultSet rset = null;
        String strSQL = "";
        String searchID = "";
        
        if (!validateForm()){
            return;
        };
        
        if (!validateDiscount(this.txtMembershipDiscount.getText().trim())){
            return;
        }
        
        ;
        if (this.txtActionID.getText().trim().length() == 0){
            getController().showPopup("Membership Tier is a required field");
            this.setSubFormVisibility(false);
            this.setActionType("");
            return;
        }
        
        searchID = this.txtActionID.getText().trim();
        
        
        
        strSQL = "Update Membership ";
        strSQL += "SET Membership_Tier_Credits = " + this.txtMembershipTierCredits.getText().trim() + ",";
        strSQL += "Membership_Discount = " + this.txtMembershipDiscount.getText().trim() + ",";
        strSQL += "Membership_Reward = '" + this.txtMembershipReward.getText().trim() + "'";
        strSQL += "where Membership_tier = '" + searchID + "'";
        
        
        try{
            rset = getController().getModelBStatement().executeQuery (strSQL);
            
            getController().showPopup("Your Membership has been updated");
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Tier","Credit","Discount","Reward"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Membership where Membership_tier = '" + searchID + "'");

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }

    }//GEN-LAST:event_btnCommitUpdateActionPerformed

    private void btnDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRecordActionPerformed
        // TODO add your handling code here:
        
        String searchID = "";
        String strSQL = "";
        
        if (this.txtActionID.getText().trim().length() == 0){
            getController().showPopup("Membership Tier is a required field");
            this.setSubFormVisibility(false);
            this.setActionType("");
            return;
        }
        
        searchID = this.txtActionID.getText().trim();

        
        strSQL = "Delete FROM Membership WHERE Membership_tier = '" + searchID + "'";
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery (strSQL);
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery ("Select * From Membership where Membership_tier = '" + searchID + "'");
            getController().showPopup("Membership Deleted");
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        this.txtActionID.setText("");
            
        this.clearTable(tblResults);
        setSubFormVisibility(false);
    }//GEN-LAST:event_btnDeleteRecordActionPerformed

    public void clearSubForm(){
        this.txtMembershipTier.setText("");
        this.txtMembershipTierCredits.setText("");
        this.txtMembershipDiscount.setText("");
        this.txtMembershipReward.setText("");
    }
    
    public void clearTable(JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }
    
    public String getActionType(){
        return actionType;
    }
    
    public void populateSubForm(String id){
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select * from membership where membership_tier = '" + id + "'");
            while ( rset.next() ) {
                this.txtMembershipTier.setText(rset.getString(1));
                this.txtMembershipTierCredits.setText(rset.getString(2));
                this.txtMembershipDiscount.setText(rset.getString(3));
                this.txtMembershipReward.setText(rset.getString(4));
            }
            rset.close();
        }
        catch (Exception e){
            getController().showPopup(e.getMessage());
        }
    }
    
    public void setActionType(String newAct){
        actionType = newAct;
    }
    
    public void setSubFormVisibility(boolean newVis){
        
        this.lblSearchID.setVisible(newVis);
        this.txtActionID.setVisible(newVis);
        this.btnFindAction.setVisible(newVis);

        this.lblSearchText.setVisible(newVis);
        this.txtAvailCreds.setVisible(newVis);
        this.btnFindByType.setVisible(newVis);
        
        this.lblMembershipTier.setVisible(newVis);
        this.txtMembershipTier.setVisible(newVis);
        
        this.lblMembershipTierCredit.setVisible(newVis);
        this.txtMembershipTierCredits.setVisible(newVis);
        
        this.lblMembershipReward.setVisible(newVis);
        this.txtMembershipReward.setVisible(newVis);
        
        this.lblMembershipDiscount.setVisible(newVis);
        this.txtMembershipDiscount.setVisible(newVis);
        
        if (newVis){
            if (this.getActionType().equals("Create")){
                this.btnCreateCommit.setVisible(newVis);
            }
            else if (this.getActionType().equals("Update")){
                this.btnCommitUpdate.setVisible(newVis);
            }
            else if (this.getActionType().equals("Delete")){
                this.btnDeleteRecord.setVisible(newVis);
            }
        }
        else {
            this.btnCommitUpdate.setVisible(newVis);
            this.btnDeleteRecord.setVisible(newVis);
            this.btnCreateCommit.setVisible(newVis);
        }
        
    }
    
    public boolean validateDiscount(String testString){
        
        double discountDoubleCheck = 0.0;
        
        try{
            discountDoubleCheck = Double.parseDouble(testString);
        }
        catch(Exception e){
            return false;
        }
        
        if (discountDoubleCheck > 1 || discountDoubleCheck < 0){
            return false;
        }
        
        return true;
    }
    
    public boolean validateForm(){
        if (this.txtMembershipTierCredits.getText().trim().length() == 0){
            getController().showPopup("Membership Tier Credits is a required field!");
            return false;
        }
        
        else if (this.txtMembershipDiscount.getText().trim().length() == 0){
            getController().showPopup("Membership Discount is a required field!");
            return false;
        }
        
        else if (this.txtMembershipReward.getText().trim().length() == 0){
            getController().showPopup("Membership Reward is a required field!");
            return false;
        }
        
        else {
            return true;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCommitUpdate;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreateCommit;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteRecord;
    private javax.swing.JButton btnFindAction;
    private javax.swing.JButton btnFindByType;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMembershipDiscount;
    private javax.swing.JLabel lblMembershipReward;
    private javax.swing.JLabel lblMembershipTier;
    private javax.swing.JLabel lblMembershipTierCredit;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JLabel lblSearchText;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField txtActionID;
    private javax.swing.JTextField txtAvailCreds;
    private javax.swing.JTextField txtMembershipDiscount;
    private javax.swing.JTextField txtMembershipReward;
    private javax.swing.JTextField txtMembershipTier;
    private javax.swing.JTextField txtMembershipTierCredits;
    // End of variables declaration//GEN-END:variables
}
