/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelbookingsystem48;


import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JTextField;
import java.util.Date;
import java.text.SimpleDateFormat;


/**
 * This is the Booking view for the hotel booking system.
 * 
 * @author Jeffrey Middendorf
 * @version 1.0
 * @since 2/4/2017
 */
public class BookingView extends View {

    String actionType;
    
    /**
     * Creates new form BookingView
     */
    public BookingView() {
        initComponents();
        //populateComboBox();
        setSubFormVisibility(false);
        actionType = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        cboRoomType = new javax.swing.JComboBox<>();
        btnFindByType = new javax.swing.JButton();
        lblRoomType = new javax.swing.JLabel();
        lblSearchID = new javax.swing.JLabel();
        txtActionID = new javax.swing.JTextField();
        txtBookingId = new javax.swing.JTextField();
        lblBookingId = new javax.swing.JLabel();
        lblCusomerNumber = new javax.swing.JLabel();
        lblBookingCheckInDate = new javax.swing.JLabel();
        lblBookingCheckOutDate = new javax.swing.JLabel();
        btnCommitUpdate = new javax.swing.JButton();
        btnDeleteRecord = new javax.swing.JButton();
        txtBookingContactPerson = new javax.swing.JTextField();
        lblContactPerson = new javax.swing.JLabel();
        txtBookingContactEmail = new javax.swing.JTextField();
        lblContactEmail = new javax.swing.JLabel();
        txtBookingTotalAmount = new javax.swing.JTextField();
        lblBookingTotalAmount = new javax.swing.JLabel();
        lblBookingPaymentStatus = new javax.swing.JLabel();
        btnFindAction = new javax.swing.JButton();
        btnCreateCommit = new javax.swing.JButton();
        cboCustomerNumber = new javax.swing.JComboBox<>();
        cboOccupancy = new javax.swing.JComboBox<>();
        lblOccupancy = new javax.swing.JLabel();
        lblEndDate = new javax.swing.JLabel();
        lblBeginDate = new javax.swing.JLabel();
        lblMinRate = new javax.swing.JLabel();
        lblMaxRate = new javax.swing.JLabel();
        cboPaymentStatus = new javax.swing.JComboBox<>();
        txtBookingCheckInDate = new javax.swing.JFormattedTextField();
        txtBookingCheckOutDate = new javax.swing.JFormattedTextField();
        cboCustomer = new javax.swing.JComboBox<>();
        lblCustomer = new javax.swing.JLabel();
        btnFindCustBooking = new javax.swing.JButton();
        txtEndDate = new javax.swing.JTextField();
        txtBeginDate = new javax.swing.JTextField();
        txtMinRate = new javax.swing.JTextField();
        txtMaxRate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Booking ID", "Customer Num", "Check In", "Check Out", "Contact Person", "Contact Email", "Total Amount", "Payment Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblResults.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblResults);

        btnCreate.setText("Create A Booking");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update a booking");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete a Booking");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Read Booking");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnFindByType.setText("Find");
        btnFindByType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByTypeActionPerformed(evt);
            }
        });

        lblRoomType.setLabelFor(cboRoomType);
        lblRoomType.setText("Room Type");

        lblSearchID.setLabelFor(txtActionID);
        lblSearchID.setText("Enter ID");

        lblBookingId.setLabelFor(txtBookingId);
        lblBookingId.setText("Booking ID");

        lblCusomerNumber.setText("Custoner number");

        lblBookingCheckInDate.setLabelFor(txtBookingCheckInDate);
        lblBookingCheckInDate.setText("Check in");

        lblBookingCheckOutDate.setLabelFor(txtBookingCheckOutDate);
        lblBookingCheckOutDate.setText("Check Out");

        btnCommitUpdate.setText("Update");
        btnCommitUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommitUpdateActionPerformed(evt);
            }
        });

        btnDeleteRecord.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteRecord.setText("Delete");
        btnDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRecordActionPerformed(evt);
            }
        });

        txtBookingContactPerson.setToolTipText("");

        lblContactPerson.setLabelFor(txtBookingContactPerson);
        lblContactPerson.setText("Contact Person");

        lblContactEmail.setLabelFor(txtBookingContactEmail);
        lblContactEmail.setText("Contact Email");

        lblBookingTotalAmount.setLabelFor(txtBookingTotalAmount);
        lblBookingTotalAmount.setText("Total Amount");

        lblBookingPaymentStatus.setText("Payment Status");

        btnFindAction.setText("Find");
        btnFindAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionActionPerformed(evt);
            }
        });

        btnCreateCommit.setText("Create");
        btnCreateCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCommitActionPerformed(evt);
            }
        });

        lblOccupancy.setText("Occupancy");

        lblEndDate.setText("Check Out Date");

        lblBeginDate.setText("Check In Date");

        lblMinRate.setText("Min Rate");

        lblMaxRate.setText("Max Rate");

        cboPaymentStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paid", "Unpaid" }));

        txtBookingCheckInDate.setToolTipText("dd-MMM-yyyy");

        txtBookingCheckOutDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        txtBookingCheckOutDate.setToolTipText("dd-MMM-yyyy");

        cboCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCustomerActionPerformed(evt);
            }
        });

        lblCustomer.setText("Customer");

        btnFindCustBooking.setText("Cust Find");
        btnFindCustBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindCustBookingActionPerformed(evt);
            }
        });

        txtEndDate.setToolTipText("dd-MMM-yyyy");

        txtBeginDate.setToolTipText("dd-MMM-yyyy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblBookingId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblCusomerNumber)
                                    .addComponent(lblBookingCheckInDate, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBookingCheckOutDate, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtBookingCheckInDate, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cboCustomerNumber, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtBookingId, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBookingCheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblOccupancy)
                                    .addComponent(lblBeginDate)
                                    .addComponent(lblMinRate))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cboOccupancy, 0, 97, Short.MAX_VALUE)
                                    .addComponent(txtBeginDate, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMinRate)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(lblSearchID)
                                .addGap(4, 4, 4)
                                .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFindAction))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCommitUpdate)
                                .addGap(277, 277, 277)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnFindByType, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnReturn)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblBookingTotalAmount, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblBookingPaymentStatus, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(lblContactEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblContactPerson, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtBookingTotalAmount, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtBookingContactEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtBookingContactPerson, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cboPaymentStatus, 0, 188, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCreateCommit)
                                .addGap(268, 268, 268)
                                .addComponent(btnDeleteRecord))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblMaxRate)
                                    .addComponent(lblRoomType)
                                    .addComponent(lblEndDate)
                                    .addComponent(lblCustomer))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cboCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboRoomType, 0, 115, Short.MAX_VALUE)
                                    .addComponent(txtEndDate)
                                    .addComponent(txtMaxRate))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFindCustBooking)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(btnCreate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindByType)
                    .addComponent(lblRoomType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboOccupancy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOccupancy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEndDate)
                    .addComponent(lblBeginDate)
                    .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBeginDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMinRate)
                    .addComponent(lblMaxRate)
                    .addComponent(txtMinRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaxRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchID)
                    .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindAction)
                    .addComponent(cboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomer)
                    .addComponent(btnFindCustBooking))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookingId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBookingId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCusomerNumber)
                            .addComponent(cboCustomerNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookingContactPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblContactPerson))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookingContactEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblContactEmail))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookingTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBookingTotalAmount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBookingPaymentStatus)
                            .addComponent(cboPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBookingCheckInDate)
                            .addComponent(txtBookingCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBookingCheckOutDate)
                            .addComponent(txtBookingCheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCommitUpdate)
                    .addComponent(btnDeleteRecord)
                    .addComponent(btnCreateCommit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        this.txtActionID.setText("");
        clearSubForm();
        populateCustomerBox();
        
        setSubFormVisibility(false);
        this.clearTable(tblResults);
        setActionType("Update");
        
        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.btnFindAction.setVisible(true);
        
        this.lblRoomType.setVisible(false);
        this.cboRoomType.setVisible(false);
        this.btnFindByType.setVisible(false);
        
        this.lblOccupancy.setVisible(false);
        this.cboOccupancy.setVisible(false);
        
        this.lblBeginDate.setVisible(false);
        this.txtBeginDate.setVisible(false);
        
        this.lblEndDate.setVisible(false);
        this.txtEndDate.setVisible(false);
        
        this.lblMinRate.setVisible(false);
        this.txtMinRate.setVisible(false);
        
        this.lblMaxRate.setVisible(false);
        this.txtMaxRate.setVisible(false);
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        getController().setView(new MainView(), this);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        clearTable(tblResults);
        setActionType("Create");
        setSubFormVisibility(true);
        
        this.populateCustomerBox();
        this.clearSubForm();
        
        this.lblSearchID.setVisible(false);
        this.txtActionID.setVisible(false);
        this.btnFindAction.setVisible(false);
        this.txtBookingId.setEnabled(false);

        this.lblRoomType.setVisible(false);
        this.cboRoomType.setVisible(false);
        this.btnFindByType.setVisible(false);
        
        this.lblOccupancy.setVisible(false);
        this.cboOccupancy.setVisible(false);
        
        this.lblBeginDate.setVisible(false);
        this.txtBeginDate.setVisible(false);
        
        this.lblEndDate.setVisible(false);
        this.txtEndDate.setVisible(false);
        
        this.lblMinRate.setVisible(false);
        this.txtMinRate.setVisible(false);
        
        this.lblMaxRate.setVisible(false);
        this.txtMaxRate.setVisible(false);
        
        this.btnCommitUpdate.setVisible(false);
        this.btnDeleteRecord.setVisible(false);
        this.btnCreateCommit.setVisible(true);
        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        setSubFormVisibility(false);
        clearTable(tblResults);
        setActionType("Read");
        populateCustmerSearchBox();
        
        this.lblRoomType.setVisible(true);
        this.cboRoomType.setVisible(true);
        this.btnFindByType.setVisible(true);
        
        this.lblOccupancy.setVisible(true);
        this.cboOccupancy.setVisible(true);
        
        this.lblCustomer.setVisible(true);
        this.cboCustomer.setVisible(true);
        this.btnFindCustBooking.setVisible(true);
        
        this.lblBeginDate.setVisible(true);
        this.txtBeginDate.setVisible(true);
        
        this.lblEndDate.setVisible(true);
        this.txtEndDate.setVisible(true);
        
        this.lblMinRate.setVisible(true);
        this.txtMinRate.setVisible(true);
        
        this.lblMaxRate.setVisible(true);
        this.txtMaxRate.setVisible(true);
        
        this.populateComboBox();
        this.populateOccCombo();
        this.populateCustomerBox();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnFindByTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByTypeActionPerformed
        // TODO add your handling code here:
        try{
            
            ResultSet rset = null;
            String strSQL = "";
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Booking ID","Customer Num","Check In","Check Out","Contact Person","Contact Email","Total Amount","Payment Status"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            String selRoomTypeChoice = "", selOccChoice = "", selCheckInDate ="", selCheckOutDate = "", selBegRate = "", selEndRate = "";
            
            if(String.valueOf(this.cboRoomType.getSelectedItem()).equals("All")){
                selRoomTypeChoice += "Room_Type";
            }
            else{
                selRoomTypeChoice = "'" + String.valueOf(this.cboRoomType.getSelectedItem()) + "'";
            }
            
            if (String.valueOf(this.cboOccupancy.getSelectedItem()).equals("All")){
                selOccChoice = "Room_Max_Occupancy";
            }
            else{
                selOccChoice = String.valueOf(this.cboOccupancy.getSelectedItem());
            }
            
            if (this.txtBeginDate.getText().trim().length() == 0){
                
                try{
                    rset = getController().getModelBStatement().executeQuery("Select Min(Booking_Check_In_Date) From Booking");
                    
                    while (rset.next()){
                        
                        SimpleDateFormat dt1 = new SimpleDateFormat("yyyy-mm-dd HH:mm:ss.s");
                        SimpleDateFormat dt2 = new SimpleDateFormat("dd-MMM-yyyy");
                        Date date1 = dt1.parse(rset.getString(1));
                        String date2 = dt2.format(date1);
                        
                        selCheckInDate = "'" + date2 + "'";
                    }
                }
                catch (Exception e){
                    getController().showPopup(e.getMessage());
                }
                
            }
            else{
                selCheckInDate = "'" + this.txtBeginDate.getText().trim() + "'";
            }
            
            if(this.txtEndDate.getText().trim().length() == 0){
                try{
                    rset = getController().getModelBStatement().executeQuery("Select Max(Booking_Check_Out_Date) From Booking");
                    
                    while (rset.next()){
                        
                        SimpleDateFormat dt1 = new SimpleDateFormat("yyyy-mm-dd HH:mm:ss.s");
                        SimpleDateFormat dt2 = new SimpleDateFormat("dd-MMM-yyyy");
                        Date date1 = dt1.parse(rset.getString(1));
                        String date2 = dt2.format(date1);
                        
                        
                        selCheckOutDate = "'" + date2 + "'";
                    }
                }
                catch (Exception e){
                    getController().showPopup(e.getMessage());
                }
            }
            else{
                selCheckOutDate = "'" + this.txtEndDate.getText().trim() + "'";
            }
                    
            if(this.txtMinRate.getText().trim().length() == 0){
                try{
                    rset = getController().getModelBStatement().executeQuery("Select Min(Room_Price) From Room");
                    
                    while (rset.next()){
                        selBegRate = rset.getString(1);
                    }
                }
                catch (Exception e){
                    getController().showPopup(e.getMessage());
                }
            }
            else{
                try{
                    Integer.parseInt(this.txtMinRate.getText().trim());
                    selBegRate = this.txtMinRate.getText().trim();
                }
                catch(NumberFormatException nfe){
                    getController().showPopup(nfe.getMessage());
                }
            }
                    
            if(this.txtMaxRate.getText().trim().length() == 0){
                try{
                    rset = getController().getModelBStatement().executeQuery("Select Max(Room_Price) From Room");
                    
                    while (rset.next()){
                        selEndRate = rset.getString(1);
                    }
                }
                catch (Exception e){
                    getController().showPopup(e.getMessage());
                }
            }
            else{
                try{
                    Integer.parseInt(this.txtMaxRate.getText().trim());
                    selEndRate = this.txtMaxRate.getText().trim();
                }
                catch(NumberFormatException nfe){
                    getController().showPopup(nfe.getMessage());
                }
            }
            
            strSQL = "SELECT b.* from booking b, booking_room_guest br, room r Where b.booking_id = br.booking_id And "
                    + "br.room_number = r.room_number And "
                    + "r.Room_Max_Occupancy = " + selOccChoice + " And "
                    + "r.Room_Type = " + selRoomTypeChoice + " And "
                    + "b.Booking_Check_Out_Date <= " + selCheckOutDate + " And "
                    + "b.Booking_Check_In_Date >= " + selCheckInDate + " And "
                    + "r.Room_Price Between " + selBegRate + " And " + selEndRate;            
            
            rset = getController().getModelBStatement().executeQuery (strSQL);
            
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();
            
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }
    }//GEN-LAST:event_btnFindByTypeActionPerformed

    private void btnFindActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionActionPerformed
        // TODO add your handling code here:
        
        this.setSubFormVisibility(true);
        this.lblRoomType.setVisible(false);
        this.cboRoomType.setVisible(false);
        this.btnFindByType.setVisible(false);
        
        this.lblOccupancy.setVisible(false);
        this.cboOccupancy.setVisible(false);
        
        this.lblBeginDate.setVisible(false);
        this.txtBeginDate.setVisible(false);
        
        this.lblEndDate.setVisible(false);
        this.txtEndDate.setVisible(false);
        
        this.lblMinRate.setVisible(false);
        this.txtMinRate.setVisible(false);
        
        this.lblMaxRate.setVisible(false);
        this.txtMaxRate.setVisible(false);
        
        this.populateCustomerBox();
        
        try{
            
            ResultSet rset = null;
            int searchID = 0;
            
            if (this.txtActionID.getText().trim().length() == 0){
                getController().showPopup("Booking ID is a required field.");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            try{
                searchID = Integer.parseInt(this.txtActionID.getText().trim());
            }
            catch (NumberFormatException nfe){
                getController().showPopup("Please enter a valid number");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Booking ID","Customer Num","Check In","Check Out","Contact Person","Contact Email","Total Amount","Payment Status"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Booking where Booking_id = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);

            rset.close();
            populateSubForm(searchID);
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }
        
    }//GEN-LAST:event_btnFindActionActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.txtActionID.setText("");
        clearSubForm();
        populateCustomerBox();
        
        setSubFormVisibility(false);
        clearTable(tblResults);
        setActionType("Delete");
        
        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.btnFindAction.setVisible(true);
        
        this.lblRoomType.setVisible(false);
        this.cboRoomType.setVisible(false);
        this.btnFindByType.setVisible(false);
        
        this.lblOccupancy.setVisible(false);
        this.cboOccupancy.setVisible(false);
        
        this.lblBeginDate.setVisible(false);
        this.txtBeginDate.setVisible(false);
        
        this.lblEndDate.setVisible(false);
        this.txtEndDate.setVisible(false);
        
        this.lblMinRate.setVisible(false);
        this.txtMinRate.setVisible(false);
        
        this.lblMaxRate.setVisible(false);
        this.txtMaxRate.setVisible(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCreateCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCommitActionPerformed
        // TODO add your handling code here:
        
        if (!validateForm()){
            return;
        }
        
        double discPerc = 0.0;
        int discAmount = 0;
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select Membership_discount from membership m, customer c where c.membership_tier = m.membership_tier And c.Customer_number = " + String.valueOf(this.cboCustomerNumber.getSelectedItem()));
        
            while (rset.next()){
                discPerc = Double.parseDouble(rset.getString(1));
            }
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
            
        
        String strSQL = "";
        int totAmount = 0;
        try{
            totAmount = Integer.parseInt(this.txtBookingTotalAmount.getText().trim());
            discAmount = (int)(discPerc * totAmount);
            totAmount = totAmount - discAmount;
        }
            catch (NumberFormatException nfe){
                getController().showPopup("Please enter a valid number");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
        
        int statusValue = 0;
        if (String.valueOf(this.cboPaymentStatus.getSelectedItem()).equals("Paid")){
            statusValue = 1;
        }
        
        int custNum = 0;
        custNum = Integer.parseInt(String.valueOf(this.cboCustomerNumber.getSelectedItem()));
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("select booking_seq.nextval from booking");
            int id = 0;
            while (rset.next()){
                id = rset.getInt(1);
            }
            
            strSQL = "INSERT INTO Booking Values (" + id + ", ";
            strSQL += custNum;
            strSQL += ", '" + this.txtBookingCheckInDate.getText().trim();
            strSQL += "', '" + this.txtBookingCheckOutDate.getText().trim();
            strSQL += "', '" + this.txtBookingContactPerson.getText().trim();
            strSQL += "', '" + this.txtBookingContactEmail.getText().trim();
            strSQL += "', " + totAmount;
            strSQL += ", " + statusValue + ")";
            
            rset = getController().getModelBStatement().executeQuery (strSQL);
            getController().showPopup("Your booking has been created.  There was a discount applied of " + Double.toString(discAmount));
            
            getController().setView(new BookingSubView(id), this);
            
            
            rset.close();

        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_btnCreateCommitActionPerformed

    private void btnCommitUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommitUpdateActionPerformed
        // TODO add your handling code here:
        ResultSet rset = null;
        String strSQL = "";
        int searchID = 0;
        
        if (!validateForm()){
            return;
        };
        
        try{
            searchID = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch (NumberFormatException nfe){
            getController().showPopup("Please enter a valid number");
            this.setSubFormVisibility(false);
            this.setActionType("");
            return;
        }
        
        int totAmount = 0;
        
        try{
            totAmount = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch (NumberFormatException nfe){
            getController().showPopup("Please enter a valid number");
            this.setSubFormVisibility(false);
            this.setActionType("");
            return;
        }
        int convertedStatus = 0;
        if(String.valueOf(this.cboCustomerNumber.getSelectedItem()).equals("Paid")){
            convertedStatus = 1;
        }
        
        strSQL = "Update Booking ";
        strSQL += "SET Customer_Number = " + String.valueOf(this.cboCustomerNumber.getSelectedItem()) + ", ";
        strSQL += "Booking_Check_In_Date = '" + this.txtBookingCheckInDate.getText().trim() + "', ";
        strSQL += "Booking_Check_Out_Date = '" + this.txtBookingCheckOutDate.getText().trim() + "',";
        strSQL += "Booking_Contact_Person = '" + this.txtBookingContactPerson.getText().trim() + "', ";
        strSQL += "Booking_Contact_Email = '" + this.txtBookingContactEmail.getText().trim() + "', ";
        strSQL += "Booking_Total_Amount = " + totAmount + ",";
        strSQL += "Booking_Payment_Status = " + convertedStatus;
        strSQL += " where Booking_ID = " + searchID;
        
        try{
            rset = getController().getModelBStatement().executeQuery (strSQL);
            rset = getController().getModelBStatement().executeQuery ("commit");
            getController().showPopup("Your room has been updated");
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Booking ID","Customer Num","Check In","Check Out","Contact Person","Contact Email","Total Amount","Payment Status"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelBStatement().executeQuery ("Select * From Booking where Booking_id = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }

    }//GEN-LAST:event_btnCommitUpdateActionPerformed

    private void btnDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRecordActionPerformed
        // TODO add your handling code here:
        
        int searchID = 0;
        String strSQL = "";
        
        try{
            searchID = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch(NumberFormatException nfe){
            getController().showPopup(nfe.getMessage());
        }
        
        strSQL = "Delete FROM Booking WHERE Booking_ID = " + searchID;
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery (strSQL);
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery ("Select * From Booking where Booking_id = " + searchID);
            getController().showPopup("Booking Deleted");
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        this.txtActionID.setText("");
            
        this.clearTable(tblResults);
        setSubFormVisibility(false);
    }//GEN-LAST:event_btnDeleteRecordActionPerformed

    private void btnFindCustBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindCustBookingActionPerformed
        // TODO add your handling code here:
        
        try{
            
            ResultSet rset = null;
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Booking ID","Customer Num","Check In","Check Out","Contact Person","Contact Email","Total Amount","Payment Status"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            String selChoice = String.valueOf(this.cboCustomer.getSelectedItem());
            
            if (selChoice.equals("All")){
                rset = getController().getModelBStatement().executeQuery ("Select * From Booking");
            }
            else {
                rset = getController().getModelBStatement().executeQuery ("Select * From Booking where customer_number = " + selChoice);
            }
            
            
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();
            
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }
    }//GEN-LAST:event_btnFindCustBookingActionPerformed

    private void cboCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCustomerActionPerformed
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_cboCustomerActionPerformed

    public void clearSubForm(){
        this.txtBookingId.setText("");
        this.txtBookingCheckInDate.setText("");
        this.txtBookingCheckOutDate.setText("");
        this.txtBookingContactPerson.setText("");
        this.txtBookingContactEmail.setText("");
        this.txtBookingTotalAmount.setText("");
    }
    
    public void clearTable(JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }
    
    public String getActionType(){
        return actionType;
    }
    
    public void populateComboBox(){
        try {
                this.cboRoomType.removeAllItems();               
                
                this.cboRoomType.addItem("All");
                
                ResultSet rset = getController().getModelBStatement().executeQuery("Select distinct room_type from room");
                while ( rset.next() ) {
                    this.cboRoomType.addItem(rset.getString(1));
                }
                rset.close();
            }
            catch(SQLException f){
                getController().showPopup("error in connection");
            }
    }
    
    public void populateCustmerSearchBox(){
        try {
                this.cboCustomer.removeAllItems();
                
                this.cboCustomer.addItem("All");
                
                ResultSet rset = getController().getModelBStatement().executeQuery("Select distinct customer_number from booking");
                while ( rset.next() ) {
                    this.cboCustomer.addItem(rset.getString(1));
                }
                rset.close();
            }
            catch(SQLException f){
                getController().showPopup("error in connection");
            }
    }
    
    public void populateCustomerBox(){
        try {
                this.cboCustomerNumber.removeAllItems();               
                
                ResultSet rset = getController().getModelBStatement().executeQuery("Select distinct customer_number from booking");
                while ( rset.next() ) {
                    this.cboCustomerNumber.addItem(rset.getString(1));
                }
                rset.close();
            }
            catch(SQLException f){
                getController().showPopup("error in connection");
            }
    }
    
    public void populateOccCombo(){
        try {
                this.cboOccupancy.removeAllItems();               
                
                this.cboOccupancy.addItem("All");
                
                ResultSet rset = getController().getModelBStatement().executeQuery("Select distinct room_max_occupancy from room");
                while ( rset.next() ) {
                    this.cboOccupancy.addItem(rset.getString(1));
                }
                rset.close();
            }
            catch(SQLException f){
                getController().showPopup("error in connection");
            }
    }
    
    public void populateSubForm(int id){
        try{
                      
            ResultSet rset = getController().getModelBStatement().executeQuery("Select * from Booking where Booking_id = " + id);
            SimpleDateFormat dt1 = new SimpleDateFormat("yyyy-mm-dd HH:mm:ss.s");
            SimpleDateFormat dt2 = new SimpleDateFormat("dd-MMM-yyyy");
            String statusValue = "Unpaid";
            
            
            
            while ( rset.next() ) {
                
                if (rset.getString(8).equals("1")){
                    statusValue = "Paid";
                }
                
                Date chkInDateDt = dt1.parse(rset.getString(3));
                Date chkOutDateDt = dt1.parse(rset.getString(4));
                String chkInDate = "", chkOutDate = "";
                
                chkInDate = dt2.format(chkInDateDt);
                chkOutDate = dt2.format(chkOutDateDt);
                
                this.txtBookingId.setText(rset.getString(1));
                this.cboCustomerNumber.setSelectedItem(rset.getString(2));
                this.txtBookingCheckInDate.setText(chkInDate);
                this.txtBookingCheckOutDate.setText(chkOutDate);
                this.txtBookingContactPerson.setText(rset.getString(5));
                this.txtBookingContactEmail.setText(rset.getString(6));
                this.txtBookingTotalAmount.setText(rset.getString(7));
                this.cboPaymentStatus.setSelectedItem(statusValue);
            }
            rset.close();
        }
        catch (Exception e){
            getController().showPopup(e.getMessage());
        }
    }
    
    public void setActionType(String newAct){
        actionType = newAct;
    }
    
    public void setSubFormVisibility(boolean newVis){
        
        this.lblSearchID.setVisible(newVis);
        this.txtActionID.setVisible(newVis);
        this.btnFindAction.setVisible(newVis);
        
        this.lblBeginDate.setVisible(newVis);
        this.txtBeginDate.setVisible(newVis);
        
        this.lblEndDate.setVisible(newVis);
        this.txtEndDate.setVisible(newVis);
        
        this.lblCustomer.setVisible(newVis);
        this.cboCustomer.setVisible(newVis);
        this.btnFindCustBooking.setVisible(newVis);
        
        this.lblMaxRate.setVisible(newVis);
        this.txtMaxRate.setVisible(newVis);
        
        this.lblMinRate.setVisible(newVis);
        this.txtMinRate.setVisible(newVis);
        
        this.lblOccupancy.setVisible(newVis);
        this.cboOccupancy.setVisible(newVis);

        this.lblRoomType.setVisible(newVis);
        this.cboRoomType.setVisible(newVis);
        this.btnFindByType.setVisible(newVis);
        
        this.lblBookingId.setVisible(newVis);
        this.txtBookingId.setVisible(newVis);
        
        this.lblCusomerNumber.setVisible(newVis);
        this.cboCustomerNumber.setVisible(newVis);
        
        this.lblBookingCheckOutDate.setVisible(newVis);
        this.txtBookingCheckOutDate.setVisible(newVis);
        
        this.lblBookingCheckInDate.setVisible(newVis);
        this.txtBookingCheckInDate.setVisible(newVis);
        
        this.lblContactEmail.setVisible(newVis);
        this.txtBookingContactEmail.setVisible(newVis);
        
        this.lblContactPerson.setVisible(newVis);
        this.txtBookingContactPerson.setVisible(newVis);
        
        this.lblBookingTotalAmount.setVisible(newVis);
        this.txtBookingTotalAmount.setVisible(newVis);
        
        this.lblBookingPaymentStatus.setVisible(newVis);
        this.cboPaymentStatus.setVisible(newVis);
        
        if (newVis){
            if (this.getActionType().equals("Create")){
                this.btnCreateCommit.setVisible(newVis);
            }
            else if (this.getActionType().equals("Update")){
                this.btnCommitUpdate.setVisible(newVis);
            }
            else if (this.getActionType().equals("Delete")){
                this.btnDeleteRecord.setVisible(newVis);
            }
        }
        else {
            this.btnCommitUpdate.setVisible(newVis);
            this.btnDeleteRecord.setVisible(newVis);
            this.btnCreateCommit.setVisible(newVis);
        }
        
    }
    
    public boolean validateForm(){
        
        if (this.txtBookingCheckInDate.getText().trim().length() == 0){
            getController().showPopup("Check in date is a required field!");
            return false;
        }
        
        else if (this.txtBookingCheckOutDate.getText().trim().length() == 0){
            getController().showPopup("Check out date is a required field!");
            return false;
        }
        
        else if (this.txtBookingContactPerson.getText().trim().length() == 0){
            getController().showPopup("Contact person is a required field!");
            return false;
        }
        
        else if (this.txtBookingContactEmail.getText().trim().length() == 0){
            getController().showPopup("Contact email is a required field!");
            return false;
        }
        
        else if (this.txtBookingTotalAmount.getText().trim().length() == 0){
            getController().showPopup("Booking total amount is a required field!");
            return false;
        }
        
        else {
            return true;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCommitUpdate;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreateCommit;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteRecord;
    private javax.swing.JButton btnFindAction;
    private javax.swing.JButton btnFindByType;
    private javax.swing.JButton btnFindCustBooking;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboCustomer;
    private javax.swing.JComboBox<String> cboCustomerNumber;
    private javax.swing.JComboBox<String> cboOccupancy;
    private javax.swing.JComboBox<String> cboPaymentStatus;
    private javax.swing.JComboBox<String> cboRoomType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBeginDate;
    private javax.swing.JLabel lblBookingCheckInDate;
    private javax.swing.JLabel lblBookingCheckOutDate;
    private javax.swing.JLabel lblBookingId;
    private javax.swing.JLabel lblBookingPaymentStatus;
    private javax.swing.JLabel lblBookingTotalAmount;
    private javax.swing.JLabel lblContactEmail;
    private javax.swing.JLabel lblContactPerson;
    private javax.swing.JLabel lblCusomerNumber;
    private javax.swing.JLabel lblCustomer;
    private javax.swing.JLabel lblEndDate;
    private javax.swing.JLabel lblMaxRate;
    private javax.swing.JLabel lblMinRate;
    private javax.swing.JLabel lblOccupancy;
    private javax.swing.JLabel lblRoomType;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField txtActionID;
    private javax.swing.JTextField txtBeginDate;
    private javax.swing.JFormattedTextField txtBookingCheckInDate;
    private javax.swing.JFormattedTextField txtBookingCheckOutDate;
    private javax.swing.JTextField txtBookingContactEmail;
    private javax.swing.JTextField txtBookingContactPerson;
    private javax.swing.JTextField txtBookingId;
    private javax.swing.JTextField txtBookingTotalAmount;
    private javax.swing.JTextField txtEndDate;
    private javax.swing.JTextField txtMaxRate;
    private javax.swing.JTextField txtMinRate;
    // End of variables declaration//GEN-END:variables
}
