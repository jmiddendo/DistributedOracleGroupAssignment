/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelbookingsystem48;

import hotelbookingsystem48.MainView;
import hotelbookingsystem48.View;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JTextField;
import java.util.Date;
import java.text.SimpleDateFormat;
public class GuestView extends View {
    String actionType;

    /**
     * Creates new form GuestView
     */
    public GuestView() {
        initComponents();
        //populateComboBox();
        setSubFormVisibility(false);
        actionType = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        lblSearchID = new javax.swing.JLabel();
        lblGuestID = new javax.swing.JLabel();
        lblGuestTitle = new javax.swing.JLabel();
        lblGuestFname = new javax.swing.JLabel();
        lblGuestLname = new javax.swing.JLabel();
        lblGuestDob = new javax.swing.JLabel();
        btnCommitUpdate = new javax.swing.JButton();
        txtActionID = new javax.swing.JTextField();
        txtGuestID = new javax.swing.JTextField();
        txtGuestTitle = new javax.swing.JTextField();
        txtGuestFname = new javax.swing.JTextField();
        txtGuestLname = new javax.swing.JTextField();
        txtGuestDob = new javax.swing.JTextField();
        btnFindByType = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        cboGuestName = new javax.swing.JComboBox<>();
        lblSearchCombo = new javax.swing.JLabel();
        btnFindAction = new javax.swing.JButton();
        lblGuestCountry = new javax.swing.JLabel();
        lblGuestCity = new javax.swing.JLabel();
        lblGuestStreet = new javax.swing.JLabel();
        lblGuestPcode = new javax.swing.JLabel();
        txtGuestPcode = new javax.swing.JTextField();
        txtGuestStreet = new javax.swing.JTextField();
        txtGuestCity = new javax.swing.JTextField();
        txtGuestCountry = new javax.swing.JTextField();
        btnDeleteRecord = new javax.swing.JButton();
        btnCreateCommit = new javax.swing.JButton();
        txtGuestEmailAddress = new javax.swing.JTextField();
        lblGuestPnumber = new javax.swing.JLabel();
        lblGuestEmailAddress = new javax.swing.JLabel();
        txtGuestPnumber = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCreate.setText("Create Guest");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update a booking");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete a Booking");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Read Guest");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        lblSearchID.setText("Enter ID");

        lblGuestID.setText("Guest ID");

        lblGuestTitle.setText("Guest Title");

        lblGuestFname.setText("Guest First Name");

        lblGuestLname.setText("Guest Last Name");

        lblGuestDob.setText("Guest DOB");

        btnCommitUpdate.setText("Update");
        btnCommitUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommitUpdateActionPerformed(evt);
            }
        });

        txtActionID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtActionIDActionPerformed(evt);
            }
        });

        txtGuestID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGuestIDActionPerformed(evt);
            }
        });

        txtGuestLname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGuestLnameActionPerformed(evt);
            }
        });

        btnFindByType.setText("Find");
        btnFindByType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByTypeActionPerformed(evt);
            }
        });

        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Guest ID", "Title", "First Name", "Last Name", "DOB", "Country", "City", "Street", "Postal Code", "Phone Number", "Email Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblResults.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblResults);

        cboGuestName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboGuestName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGuestNameActionPerformed(evt);
            }
        });

        lblSearchCombo.setText("Guest Name");

        btnFindAction.setText("Find");
        btnFindAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionActionPerformed(evt);
            }
        });

        lblGuestCountry.setText("Guest Country");

        lblGuestCity.setText("Guest City");

        lblGuestStreet.setText("Guest Street");

        lblGuestPcode.setText("Guest Postal code");

        txtGuestCountry.setToolTipText("");

        btnDeleteRecord.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteRecord.setText("Delete");
        btnDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRecordActionPerformed(evt);
            }
        });

        btnCreateCommit.setText("Create");
        btnCreateCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCommitActionPerformed(evt);
            }
        });

        lblGuestPnumber.setText("Guest Phone Number");

        lblGuestEmailAddress.setText("Guest Email Address");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(lblSearchID))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblGuestDob)
                                .addComponent(lblGuestLname)
                                .addComponent(lblGuestCountry))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblGuestTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblGuestFname)
                                .addComponent(lblGuestID, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGuestCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGuestLname, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFindAction))
                            .addComponent(txtGuestID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGuestTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGuestFname, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGuestDob, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 395, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblSearchCombo)
                                .addGap(18, 18, 18)
                                .addComponent(cboGuestName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnFindByType))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblGuestEmailAddress)
                                    .addComponent(lblGuestPnumber)
                                    .addComponent(lblGuestPcode)
                                    .addComponent(lblGuestCity)
                                    .addComponent(lblGuestStreet))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtGuestEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGuestCity, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGuestStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGuestPcode, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGuestPnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnReturn)
                        .addContainerGap(180, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(btnCommitUpdate)
                .addGap(304, 304, 304)
                .addComponent(btnDeleteRecord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreateCommit)
                .addGap(152, 152, 152))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnSearch)
                    .addComponent(btnReturn))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFindAction)
                    .addComponent(lblSearchCombo)
                    .addComponent(cboGuestName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindByType)
                    .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblGuestStreet)
                        .addComponent(txtGuestStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtGuestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblGuestID)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGuestCity)
                            .addComponent(txtGuestCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGuestTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGuestTitle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGuestFname)
                    .addComponent(txtGuestFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGuestPcode)
                    .addComponent(txtGuestPcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGuestLname)
                    .addComponent(txtGuestLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGuestPnumber)
                    .addComponent(txtGuestPnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGuestDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGuestEmailAddress)
                    .addComponent(txtGuestEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGuestDob))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGuestCountry)
                    .addComponent(txtGuestCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCommitUpdate)
                    .addComponent(btnDeleteRecord)
                    .addComponent(btnCreateCommit))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:

        clearTable(tblResults);
        setActionType("Create");
        setSubFormVisibility(true);

        this.lblSearchID.setVisible(false);
        this.txtActionID.setVisible(false);
        this.btnFindAction.setVisible(false);
        this.txtGuestID.setEnabled(false);

        this.lblSearchCombo.setVisible(false);
        this.cboGuestName.setVisible(false);
        this.btnFindByType.setVisible(false);

        this.btnCommitUpdate.setVisible(false);
        this.btnDeleteRecord.setVisible(false);
        this.btnCreateCommit.setVisible(true);

    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        this.txtActionID.setText("");
        clearSubForm();

        setSubFormVisibility(false);
        this.clearTable(tblResults);
        setActionType("Update");

        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.btnFindAction.setVisible(true);

        this.lblSearchCombo.setVisible(false);
        this.cboGuestName.setVisible(false);
        this.btnFindByType.setVisible(false);

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.txtActionID.setText("");
        clearSubForm();

        setSubFormVisibility(false);
        clearTable(tblResults);
        setActionType("Delete");

        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.btnFindAction.setVisible(true);

        this.lblSearchCombo.setVisible(false);
        this.cboGuestName.setVisible(false);
        this.btnFindByType.setVisible(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        setSubFormVisibility(false);
        clearTable(tblResults);
        setActionType("Read");

        this.lblSearchCombo.setVisible(true);
        this.cboGuestName.setVisible(true);
        this.btnFindByType.setVisible(true);

        populateComboBox();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        getController().setView(new MainView(), this);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnCommitUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommitUpdateActionPerformed
        // TODO add your handling code here:
        ResultSet rset = null;
        String strSQL = "";
        int searchID = 0;

        if (!validateForm()){
            return;
        };

        try{
            searchID = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch (NumberFormatException nfe){
            getController().showPopup("Please enter a valid number");
            this.setSubFormVisibility(false);
            this.setActionType("");
            return;
        }

        strSQL = "Update GUEST ";
      //  strSQL += "SET GUEST_NUMBER = '" + this.txtGuestID.getText().trim() + "'";
        strSQL += "SET GUEST_TITLE = '" + this.txtGuestTitle.getText().trim() + "',";
        strSQL += "GUEST_FIRST_NAME= '" + this.txtGuestFname.getText().trim() + "',";
        strSQL += "GUEST_LAST_NAME = '" + this.txtGuestLname.getText().trim() + "',";
        strSQL += "GUEST_DOB = '" + this.txtGuestDob.getText().trim() + "',";
        strSQL += "GUEST_COUNTRY = '" + this.txtGuestCountry.getText().trim() + "',";
        strSQL += "GUEST_CITY = '" + this.txtGuestCity.getText().trim() + "',";
        strSQL += "GUEST_STREET = '" + this.txtGuestStreet.getText().trim() + "',";
        strSQL += "GUEST_POSTAL_CODE = '" + this.txtGuestPcode.getText().trim() + "',";
        strSQL += "GUEST_PHONE_NUMBER = '" + this.txtGuestPnumber.getText().trim() + "',";
        strSQL += "GUEST_EMAIL = '" + this.txtGuestEmailAddress.getText().trim() + "'";
        strSQL += "where GUEST_NUMBER = " + searchID;

        try{
            rset = getController().getModelBStatement().executeQuery(strSQL);

            getController().showPopup("Your Guest Details has been updated");

            tblResults.clearSelection();
            String[] tableColumnsName = {"GuestID","Title","First Name","Last Name","DOB","Country","City","Street","Postal Code","Phone Number","Email Address"};
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();

            int rowCount = aModel.getRowCount();

            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }

            aModel.setColumnIdentifiers(tableColumnsName);

            rset = getController().getModelBStatement().executeQuery ("Select * From GUEST where GUEST_NUMBER = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }

                aModel.addRow(objects);
            }

            tblResults.setModel(aModel);

            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_btnCommitUpdateActionPerformed

    private void btnFindByTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByTypeActionPerformed
        // TODO add your handling code here:

       /* this.setSubFormVisibility(true);
        this.lblSearchCombo.setVisible(false);
        this.cboGuestName.setVisible(false);
        this.btnFindByType.setVisible(false);*/

         try{
            
            ResultSet rset = null;
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Guest ID","Title","First Name","Last Name","DOB","Country","City","Street","Postal Code","Phone Number","Email Address"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            String selChoice = String.valueOf(this.cboGuestName.getSelectedItem());
            if (selChoice.equals("All")){
                rset = getController().getModelBStatement().executeQuery ("Select * From Guest");
            }
            else {

            rset = getController().getModelBStatement().executeQuery ("Select * From Guest where GUEST_FIRST_NAME = '" + selChoice +"'");
        }
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }

                aModel.addRow(objects);
            }

            tblResults.setModel(aModel);

            rset.close();
            //populateSubForm(searchID);
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }

    }//GEN-LAST:event_btnFindByTypeActionPerformed

    private void btnFindActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionActionPerformed
        // TODO add your handling code here:

        this.setSubFormVisibility(true);
        this.lblSearchCombo.setVisible(false);
        this.cboGuestName.setVisible(false);
        this.btnFindByType.setVisible(false);

        try{

            ResultSet rset = null;
            int searchID = 0;

            if (this.txtActionID.getText().trim().length() == 0){
                getController().showPopup("Guest ID is a required field.");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }

            try{
                searchID = Integer.parseInt(this.txtActionID.getText().trim());
            }
            catch (NumberFormatException nfe){
                getController().showPopup("Please enter a valid number");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }

            tblResults.clearSelection();
            String[] tableColumnsName = {"Guest ID","Title","First Name","Last Name","DOB","Country","City","Street","Postal Code","Phone Number","Email Address"};
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();

            int rowCount = aModel.getRowCount();

            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }

            aModel.setColumnIdentifiers(tableColumnsName);

            rset = getController().getModelBStatement().executeQuery ("Select * From Guest where GUEST_NUMBER = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }

                aModel.addRow(objects);
            }

            tblResults.setModel(aModel);

            rset.close();
            populateSubForm(searchID);
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }

    }//GEN-LAST:event_btnFindActionActionPerformed

    private void btnDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRecordActionPerformed
        // TODO add your handling code here:

        int searchID = 0;
        String strSQL = "";

        try{
            searchID = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch(NumberFormatException nfe){
            getController().showPopup(nfe.getMessage());
        }

        strSQL = "Delete FROM GUEST WHERE GUEST_NUMBER = " + searchID;

        try{
            ResultSet rset = getController().getModelBStatement().executeQuery (strSQL);
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }

        try{
            ResultSet rset = getController().getModelBStatement().executeQuery ("Select * From Guest where GUEST_NUMBER = " + searchID);
            getController().showPopup("Guest Details Deleted");
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }

        this.txtActionID.setText("");

        this.clearTable(tblResults);
        setSubFormVisibility(false);
    }//GEN-LAST:event_btnDeleteRecordActionPerformed

    private void btnCreateCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCommitActionPerformed
        // TODO add your handling code here:

        if (!validateForm()){
            return;
        }

        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("select guest_seq.nextval from GUEST");
            int id = 0;
            while (rset.next()){
                id = rset.getInt(1);
            }
            rset = getController().getModelBStatement().executeQuery("alter session set global_names = true");
            rset = getController().getModelBStatement().executeQuery ("INSERT INTO GUEST Values (" + id + ", '"
                + this.txtGuestTitle.getText().trim()
                + "', '" + this.txtGuestFname.getText().trim()
                + "', '" + this.txtGuestLname.getText().trim()
                + "', '" + this.txtGuestDob.getText().trim()
                + "', '" + this.txtGuestCountry.getText().trim()
                + "', '" + this.txtGuestCity.getText().trim()
                + "', '" + this.txtGuestStreet.getText().trim()
                + "', '" + this.txtGuestPcode.getText().trim()
                + "', '" + this.txtGuestPnumber.getText().trim()
                + "', '" + this.txtGuestEmailAddress.getText().trim() + "')");
            rset = getController().getModelBStatement().executeQuery("alter session set global_names = false");
            getController().showPopup("Your Guest has been created");

            this.clearSubForm();

            tblResults.clearSelection();
            String[] tableColumnsName = {"Guest ID","Title","First Name","Last Name","DOB","Country","City","Street","Postal Code","Phone Number","Email Address"};
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();

            int rowCount = aModel.getRowCount();

            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }

            aModel.setColumnIdentifiers(tableColumnsName);

            rset = getController().getModelBStatement().executeQuery ("Select * From Guest where GUEST_NUMBER = " + id);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }

                aModel.addRow(objects);
            }

            tblResults.setModel(aModel);

            rset.close();

        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_btnCreateCommitActionPerformed

    private void txtGuestLnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGuestLnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGuestLnameActionPerformed

    private void cboGuestNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGuestNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboGuestNameActionPerformed

    private void txtGuestIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGuestIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGuestIDActionPerformed

    private void txtActionIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtActionIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtActionIDActionPerformed

 public void clearSubForm(){
        this.txtGuestID.setText("");
        this.txtGuestTitle.setText("");
        this.txtGuestFname.setText("");
        this.txtGuestLname.setText("");
        this.txtGuestDob.setText("");
        this.txtGuestCountry.setText("");
        this.txtGuestCity.setText("");
        this.txtGuestStreet.setText("");
        this.txtGuestPcode.setText("");
        this.txtGuestPnumber.setText("");
        this.txtGuestEmailAddress.setText("");
    }
    
    public void clearTable(JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }
    
    public String getActionType(){
        return actionType;
    }
    
    public void populateComboBox(){
        try {
                this.cboGuestName.removeAllItems();               
                
                this.cboGuestName.addItem("All");
                
                ResultSet rset = getController().getModelBStatement().executeQuery("Select distinct GUEST_FIRST_NAME from GUEST");
                while ( rset.next() ) {
                    this.cboGuestName.addItem(rset.getString(1));
                }
                rset.close();
            }
            catch(SQLException f){
                getController().showPopup("error in connection");
            }
    }
    
    public void populateSubForm(int id){
        try{
            ResultSet rset = getController().getModelBStatement().executeQuery("Select * from GUEST where GUEST_NUMBER = " + id);
            while ( rset.next() ) {
                this.txtGuestID.setText(rset.getString(1));
                this.txtGuestTitle.setText(rset.getString(2));
                
                SimpleDateFormat dt1 = new SimpleDateFormat("yyyy-mm-dd HH:mm:ss.s");
                SimpleDateFormat dt2 = new SimpleDateFormat("dd-MMM-yyyy");
                Date date1 = dt1.parse(rset.getString(5));
                String date2 = dt2.format(date1);
                
                this.txtGuestFname.setText(rset.getString(3));
                this.txtGuestLname.setText(rset.getString(4));
                this.txtGuestDob.setText(date2);
                this.txtGuestCountry.setText(rset.getString(6));
                this.txtGuestCity.setText(rset.getString(7));
                this.txtGuestStreet.setText(rset.getString(8));
                this.txtGuestPcode.setText(rset.getString(9));
                this.txtGuestPnumber.setText(rset.getString(10));
                this.txtGuestEmailAddress.setText(rset.getString(11));
            }
            rset.close();
        }
        catch (Exception e){
            getController().showPopup(e.getMessage());
        }
    }
    
    public void setActionType(String newAct){
        actionType = newAct;
    }
    
    public void setSubFormVisibility(boolean newVis){
        
        this.lblSearchID.setVisible(newVis);
        this.txtActionID.setVisible(newVis);
        this.btnFindAction.setVisible(newVis);

        this.lblSearchCombo.setVisible(newVis);
        this.cboGuestName.setVisible(newVis);
        this.btnFindByType.setVisible(newVis);
        
        this.lblGuestID.setVisible(newVis);
        this.txtGuestID.setVisible(newVis);
       
        this.lblGuestTitle.setVisible(newVis);
        this.txtGuestTitle.setVisible(newVis);
        
        this.lblGuestFname.setVisible(newVis);
        this.txtGuestFname.setVisible(newVis);
        
        this.lblGuestLname.setVisible(newVis);
        this.txtGuestLname.setVisible(newVis);
        
        this.lblGuestDob.setVisible(newVis);
        this.txtGuestDob.setVisible(newVis);
        
       
        
        this.lblGuestStreet.setVisible(newVis);
        this.txtGuestStreet.setVisible(newVis);
        
        this.lblGuestCity.setVisible(newVis);
        this.txtGuestCity.setVisible(newVis);
        
        this.lblGuestCountry.setVisible(newVis);
        this.txtGuestCountry.setVisible(newVis);
        
        this.lblGuestPcode.setVisible(newVis);
        this.txtGuestPcode.setVisible(newVis);
        
        this.lblGuestPnumber.setVisible(newVis);
        this.txtGuestPnumber.setVisible(newVis);
        
        this.lblGuestEmailAddress.setVisible(newVis);
        this.txtGuestEmailAddress.setVisible(newVis);
        
        if (newVis){
            if (this.getActionType().equals("Create")){
                this.btnCreateCommit.setVisible(newVis);
            }
            else if (this.getActionType().equals("Update")){
                this.btnCommitUpdate.setVisible(newVis);
            }
            else if (this.getActionType().equals("Delete")){
                this.btnDeleteRecord.setVisible(newVis);
            }
        }
        else {
            this.btnCommitUpdate.setVisible(newVis);
            this.btnDeleteRecord.setVisible(newVis);
            this.btnCreateCommit.setVisible(newVis);
        }
        
    }
    
    public boolean validateForm(){
        if (this.txtGuestFname.getText().trim().length() == 0){
            getController().showPopup("Guest First name is a required field!");
            return false;
        }
        
        else if (this.txtGuestLname.getText().trim().length() == 0){
            getController().showPopup("Guest last name is a required field!");
            return false;
        }
        
        else if (this.txtGuestDob.getText().trim().length() == 0){
            getController().showPopup("Guest DOB is a required field!");
            return false;
        }
        
        
        
        else if (this.txtGuestCity.getText().trim().length() == 0){
            getController().showPopup("Guest city is a required field!");
            return false;
        }
        else if (this.txtGuestCountry.getText().trim().length() == 0){
            getController().showPopup("Guest country is a required field!");
            return false;
        }
        
        else if (this.txtGuestStreet.getText().trim().length() == 0){
            getController().showPopup("Guest Street address is a required field!");
            return false;
        }
        else if (this.txtGuestPcode.getText().trim().length() == 0){
            getController().showPopup("Guest postal code is a required field!");
            return false;
        }
        else if (this.txtGuestPnumber.getText().trim().length() == 0){
            getController().showPopup("Guest Phone number is a required field!");
            return false;
        }
        
        
        else if (this.txtGuestEmailAddress.getText().trim().length() == 0){
            getController().showPopup("Guest email text is a required field!");
            return false;
        }
        
        else {
            return true;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCommitUpdate;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreateCommit;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteRecord;
    private javax.swing.JButton btnFindAction;
    private javax.swing.JButton btnFindByType;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboGuestName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblGuestCity;
    private javax.swing.JLabel lblGuestCountry;
    private javax.swing.JLabel lblGuestDob;
    private javax.swing.JLabel lblGuestEmailAddress;
    private javax.swing.JLabel lblGuestFname;
    private javax.swing.JLabel lblGuestID;
    private javax.swing.JLabel lblGuestLname;
    private javax.swing.JLabel lblGuestPcode;
    private javax.swing.JLabel lblGuestPnumber;
    private javax.swing.JLabel lblGuestStreet;
    private javax.swing.JLabel lblGuestTitle;
    private javax.swing.JLabel lblSearchCombo;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField txtActionID;
    private javax.swing.JTextField txtGuestCity;
    private javax.swing.JTextField txtGuestCountry;
    private javax.swing.JTextField txtGuestDob;
    private javax.swing.JTextField txtGuestEmailAddress;
    private javax.swing.JTextField txtGuestFname;
    private javax.swing.JTextField txtGuestID;
    private javax.swing.JTextField txtGuestLname;
    private javax.swing.JTextField txtGuestPcode;
    private javax.swing.JTextField txtGuestPnumber;
    private javax.swing.JTextField txtGuestStreet;
    private javax.swing.JTextField txtGuestTitle;
    // End of variables declaration//GEN-END:variables
}
