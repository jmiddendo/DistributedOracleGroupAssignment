/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelbookingsystem48;


import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JTextField;


/**
 * This is the hotel view for the hotel booking system.
 * 
 * @author Jeffrey Middendorf
 * @version 1.0
 * @since 2/4/2017
 */
public class HotelView extends View {

    String actionType;
    
    /**
     * Creates new form HotelView
     */
    public HotelView() {
        initComponents();
        //populateComboBox();
        setSubFormVisibility(false);
        actionType = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        cboHotelType = new javax.swing.JComboBox<>();
        btnFindByType = new javax.swing.JButton();
        lblSearchCombo = new javax.swing.JLabel();
        lblSearchID = new javax.swing.JLabel();
        txtActionID = new javax.swing.JTextField();
        txtHotelID = new javax.swing.JTextField();
        lblHotelID = new javax.swing.JLabel();
        lblHotelName = new javax.swing.JLabel();
        lblHotelType = new javax.swing.JLabel();
        lblHotelYear = new javax.swing.JLabel();
        lblHotelCountry = new javax.swing.JLabel();
        txtHotelName = new javax.swing.JTextField();
        txtHotelType = new javax.swing.JTextField();
        txtHotelYear = new javax.swing.JTextField();
        txtHotelCountry = new javax.swing.JTextField();
        btnCommitUpdate = new javax.swing.JButton();
        btnDeleteRecord = new javax.swing.JButton();
        txtHotelCity = new javax.swing.JTextField();
        lblHotelCity = new javax.swing.JLabel();
        txtHotelAddress = new javax.swing.JTextField();
        lblHotelAddress = new javax.swing.JLabel();
        txtContactNumber = new javax.swing.JTextField();
        txtEmailAddress = new javax.swing.JTextField();
        lblContactNumber = new javax.swing.JLabel();
        lblEmailAddress = new javax.swing.JLabel();
        btnFindAction = new javax.swing.JButton();
        btnCreateCommit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Hotel ID", "Name", "Type", "Year", "Country", "City", "Address", "Contact Number", "Email Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblResults.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblResults);

        btnCreate.setText("Create A Hotel");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update a Hotel");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete a Hotel");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Read Hotel");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        cboHotelType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnFindByType.setText("Find");
        btnFindByType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByTypeActionPerformed(evt);
            }
        });

        lblSearchCombo.setLabelFor(cboHotelType);
        lblSearchCombo.setText("Hotel Type");

        lblSearchID.setLabelFor(txtActionID);
        lblSearchID.setText("Enter ID");

        lblHotelID.setLabelFor(txtHotelID);
        lblHotelID.setText("Hotel ID");

        lblHotelName.setLabelFor(txtHotelName);
        lblHotelName.setText("Hotel Name");

        lblHotelType.setLabelFor(txtHotelType);
        lblHotelType.setText("Hotel Type");

        lblHotelYear.setLabelFor(txtHotelYear);
        lblHotelYear.setText("Hotel Year");

        lblHotelCountry.setLabelFor(txtHotelCountry);
        lblHotelCountry.setText("Hotel Country");

        btnCommitUpdate.setText("Update");
        btnCommitUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommitUpdateActionPerformed(evt);
            }
        });

        btnDeleteRecord.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteRecord.setText("Delete");
        btnDeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRecordActionPerformed(evt);
            }
        });

        txtHotelCity.setToolTipText("");

        lblHotelCity.setLabelFor(txtHotelCity);
        lblHotelCity.setText("Hotel City");

        lblHotelAddress.setLabelFor(txtHotelAddress);
        lblHotelAddress.setText("Hotel Address");

        lblContactNumber.setLabelFor(txtContactNumber);
        lblContactNumber.setText("Hotel Contact Number");

        lblEmailAddress.setLabelFor(txtEmailAddress);
        lblEmailAddress.setText("Hotel Email Address");

        btnFindAction.setText("Find");
        btnFindAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionActionPerformed(evt);
            }
        });

        btnCreateCommit.setText("Create");
        btnCreateCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCommitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSearchCombo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboHotelType, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFindByType, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReturn))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearchID)
                        .addGap(4, 4, 4)
                        .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblHotelID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblHotelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblHotelType, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHotelYear, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHotelCountry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHotelCountry)
                                    .addComponent(txtHotelType)
                                    .addComponent(txtHotelYear)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtHotelName))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtHotelID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHotelCity, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblHotelAddress, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblContactNumber, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEmailAddress, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtHotelCity)
                            .addComponent(txtHotelAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(txtContactNumber)
                            .addComponent(txtEmailAddress)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFindAction)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnCommitUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreateCommit)
                .addGap(278, 278, 278)
                .addComponent(btnDeleteRecord))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(btnCreate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboHotelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindByType)
                    .addComponent(lblSearchID)
                    .addComponent(txtActionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchCombo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFindAction))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHotelID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHotelID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHotelName)
                            .addComponent(txtHotelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHotelType)
                            .addComponent(txtHotelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHotelYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHotelYear)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHotelCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHotelCity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHotelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHotelAddress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblContactNumber))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmailAddress))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHotelCountry)
                    .addComponent(txtHotelCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCommitUpdate)
                    .addComponent(btnDeleteRecord)
                    .addComponent(btnCreateCommit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        this.txtActionID.setText("");
        clearSubForm();
        
        setSubFormVisibility(false);
        this.clearTable(tblResults);
        setActionType("Update");
        
        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.btnFindAction.setVisible(true);
        
        this.lblSearchCombo.setVisible(false);
        this.cboHotelType.setVisible(false);
        this.btnFindByType.setVisible(false);
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        getController().setView(new MainView(), this);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        clearTable(tblResults);
        setActionType("Create");
        setSubFormVisibility(true);
        
        this.lblSearchID.setVisible(false);
        this.txtActionID.setVisible(false);
        this.btnFindAction.setVisible(false);
        this.txtHotelID.setEnabled(false);

        this.lblSearchCombo.setVisible(false);
        this.cboHotelType.setVisible(false);
        this.btnFindByType.setVisible(false);
        
        this.btnCommitUpdate.setVisible(false);
        this.btnDeleteRecord.setVisible(false);
        this.btnCreateCommit.setVisible(true);
        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        setSubFormVisibility(false);
        clearTable(tblResults);
        setActionType("Read");
        
        this.lblSearchCombo.setVisible(true);
        this.cboHotelType.setVisible(true);
        this.btnFindByType.setVisible(true);
        
        populateComboBox();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnFindByTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByTypeActionPerformed
        // TODO add your handling code here:
        try{
            
            ResultSet rset = null;
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Hotel ID","Name","Type","Year","Country","City","Address","Contact Number","Email Address"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            String selChoice = String.valueOf(this.cboHotelType.getSelectedItem());
            
            if (selChoice.equals("All")){
                rset = getController().getModelAStatement().executeQuery ("Select * From Hotel");
            }
            else {
                rset = getController().getModelAStatement().executeQuery ("Select * From Hotel where Hotel_type = '" + selChoice + "'");
            }
            
            
            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();
            
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }
    }//GEN-LAST:event_btnFindByTypeActionPerformed

    private void btnFindActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionActionPerformed
        // TODO add your handling code here:
        
        this.setSubFormVisibility(true);
        this.lblSearchCombo.setVisible(false);
        this.cboHotelType.setVisible(false);
        this.btnFindByType.setVisible(false);
        
        try{
            
            ResultSet rset = null;
            int searchID = 0;
            
            if (this.txtActionID.getText().trim().length() == 0){
                getController().showPopup("Hotel ID is a required field.");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            try{
                searchID = Integer.parseInt(this.txtActionID.getText().trim());
            }
            catch (NumberFormatException nfe){
                getController().showPopup("Please enter a valid number");
                this.setSubFormVisibility(false);
                this.setActionType("");
                return;
            }
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Hotel ID","Name","Type","Year","Country","City","Address","Contact Number","Email Address"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelAStatement().executeQuery ("Select * From Hotel where Hotel_id = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);

            rset.close();
            populateSubForm(searchID);
        }
        catch(Exception e){
            getController().showPopup("The query failed to execute!");
        }
        
    }//GEN-LAST:event_btnFindActionActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.txtActionID.setText("");
        clearSubForm();
        
        setSubFormVisibility(false);
        clearTable(tblResults);
        setActionType("Delete");
        
        this.lblSearchID.setVisible(true);
        this.txtActionID.setVisible(true);
        this.btnFindAction.setVisible(true);
        
        this.lblSearchCombo.setVisible(false);
        this.cboHotelType.setVisible(false);
        this.btnFindByType.setVisible(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCreateCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCommitActionPerformed
        // TODO add your handling code here:
        
        if (!validateForm()){
            return;
        }
        
        try{
            ResultSet rset = getController().getModelAStatement().executeQuery("select hotel_seq.nextval from hotel");
            int id = 0;
            while (rset.next()){
                id = rset.getInt(1);
            }
            rset = getController().getModelAStatement().executeQuery("alter session set global_names = true");
            rset = getController().getModelAStatement().executeQuery ("INSERT INTO Hotel Values (" + id + ", '" 
                                            + this.txtHotelName.getText().trim() 
                                            + "', '" + this.txtHotelType.getText().trim() 
                                            + "', '" + this.txtHotelYear.getText().trim()
                                            + "', '" + this.txtHotelCountry.getText()
                                            + "', '" + this.txtHotelCity.getText().trim()
                                            + "', '" + this.txtHotelAddress.getText().trim()
                                            + "', '" + this.txtContactNumber.getText().trim()
                                            + "', '" + this.txtEmailAddress.getText().trim() + "')");
            rset = getController().getModelAStatement().executeQuery("commit");
            rset = getController().getModelAStatement().executeQuery("alter session set global_names = false");
            getController().showPopup("Your hotel has been created");
            
            this.clearSubForm();
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Hotel ID","Name","Type","Year","Country","City","Address","Contact Number","Email Address"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelAStatement().executeQuery ("Select * From Hotel where Hotel_id = " + id);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();

        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
    }//GEN-LAST:event_btnCreateCommitActionPerformed

    private void btnCommitUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommitUpdateActionPerformed
        // TODO add your handling code here:
        ResultSet rset = null;
        String strSQL = "";
        int searchID = 0;
        
        if (!validateForm()){
            return;
        };
        
        try{
            searchID = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch (NumberFormatException nfe){
            getController().showPopup("Please enter a valid number");
            this.setSubFormVisibility(false);
            this.setActionType("");
            return;
        }
        
        strSQL = "Update Hotel ";
        strSQL += "SET Hotel_Name = '" + this.txtHotelName.getText().trim() + "',";
        strSQL += "Hotel_Type = '" + this.txtHotelType.getText().trim() + "',";
        strSQL += "Hotel_Construction_Year = '" + this.txtHotelYear.getText().trim() + "',";
        strSQL += "Hotel_Country = '" + this.txtHotelCountry.getText().trim() + "',";
        strSQL += "Hotel_City = '" + this.txtHotelCity.getText().trim() + "',";
        strSQL += "Hotel_Address = '" + this.txtHotelAddress.getText().trim() + "',";
        strSQL += "Hotel_Contact_Number = '" + this.txtContactNumber.getText().trim() + "',";
        strSQL += "Hotel_Email_Address = '" + this.txtEmailAddress.getText().trim() + "'";
        strSQL += "where hotel_ID = " + searchID;
        
        try{
            rset = getController().getModelAStatement().executeQuery (strSQL);
            rset = getController().getModelAStatement().executeQuery("commit");
            getController().showPopup("Your hotel has been updated");
            
            tblResults.clearSelection();
            String[] tableColumnsName = {"Hotel ID","Name","Type","Year","Country","City","Address","Contact Number","Email Address"}; 
            DefaultTableModel aModel = (DefaultTableModel) tblResults.getModel();
            
            int rowCount = aModel.getRowCount();
            
            for (int i = rowCount - 1; i >= 0; i--) {
                aModel.removeRow(i);
            }
            
            aModel.setColumnIdentifiers(tableColumnsName);
            
            rset = getController().getModelAStatement().executeQuery ("Select * From Hotel where Hotel_id = " + searchID);

            // Loop through the ResultSet and transfer in the Model
            java.sql.ResultSetMetaData rsmd = rset.getMetaData();
            int colNo = rsmd.getColumnCount();
            while(rset.next()){
                Object[] objects = new Object[colNo];

                for(int i=0;i<colNo;i++){
                    objects[i]=rset.getObject(i+1);
                }
                
                aModel.addRow(objects);
            }
            
            tblResults.setModel(aModel);
            
            rset.close();
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }

    }//GEN-LAST:event_btnCommitUpdateActionPerformed

    private void btnDeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRecordActionPerformed
        // TODO add your handling code here:
        
        int searchID = 0;
        String strSQL = "";
        
        try{
            searchID = Integer.parseInt(this.txtActionID.getText().trim());
        }
        catch(NumberFormatException nfe){
            getController().showPopup(nfe.getMessage());
        }
        
        strSQL = "Delete FROM Hotel WHERE Hotel_ID = " + searchID;
        
        try{
            ResultSet rset = getController().getModelAStatement().executeQuery (strSQL);
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        try{
            ResultSet rset = getController().getModelAStatement().executeQuery ("Select * From Hotel where Hotel_id = " + searchID);
            getController().showPopup("Hotel Deleted");
        }
        catch(Exception e){
            getController().showPopup(e.getMessage());
        }
        
        this.txtActionID.setText("");
            
        this.clearTable(tblResults);
        setSubFormVisibility(false);
    }//GEN-LAST:event_btnDeleteRecordActionPerformed

    public void clearSubForm(){
        this.txtHotelID.setText("");
        this.txtHotelName.setText("");
        this.txtHotelType.setText("");
        this.txtHotelYear.setText("");
        this.txtHotelCountry.setText("");
        this.txtHotelCity.setText("");
        this.txtHotelAddress.setText("");
        this.txtContactNumber.setText("");
        this.txtEmailAddress.setText("");
    }
    
    public void clearTable(JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }
    
    public String getActionType(){
        return actionType;
    }
    
    public void populateComboBox(){
        try {
                this.cboHotelType.removeAllItems();               
                
                this.cboHotelType.addItem("All");
                
                ResultSet rset = getController().getModelAStatement().executeQuery("Select distinct hotel_type from hotel");
                while ( rset.next() ) {
                    this.cboHotelType.addItem(rset.getString(1));
                }
                rset.close();
            }
            catch(SQLException f){
                getController().showPopup("error in connection");
            }
    }
    
    public void populateSubForm(int id){
        try{
            ResultSet rset = getController().getModelAStatement().executeQuery("Select * from hotel where hotel_id = " + id);
            while ( rset.next() ) {
                this.txtHotelID.setText(rset.getString(1));
                this.txtHotelName.setText(rset.getString(2));
                this.txtHotelType.setText(rset.getString(3));
                this.txtHotelYear.setText(rset.getString(4));
                this.txtHotelCountry.setText(rset.getString(5));
                this.txtHotelCity.setText(rset.getString(6));
                this.txtHotelAddress.setText(rset.getString(7));
                this.txtContactNumber.setText(rset.getString(8));
                this.txtEmailAddress.setText(rset.getString(9));
            }
            rset.close();
        }
        catch (Exception e){
            getController().showPopup(e.getMessage());
        }
    }
    
    public void setActionType(String newAct){
        actionType = newAct;
    }
    
    public void setSubFormVisibility(boolean newVis){
        
        this.lblSearchID.setVisible(newVis);
        this.txtActionID.setVisible(newVis);
        this.btnFindAction.setVisible(newVis);

        this.lblSearchCombo.setVisible(newVis);
        this.cboHotelType.setVisible(newVis);
        this.btnFindByType.setVisible(newVis);
        
        this.lblHotelID.setVisible(newVis);
        this.txtHotelID.setVisible(newVis);
        
        this.lblHotelName.setVisible(newVis);
        this.txtHotelName.setVisible(newVis);
        
        this.lblHotelYear.setVisible(newVis);
        this.txtHotelYear.setVisible(newVis);
        
        this.lblHotelType.setVisible(newVis);
        this.txtHotelType.setVisible(newVis);
        
        this.lblHotelAddress.setVisible(newVis);
        this.txtHotelAddress.setVisible(newVis);
        
        this.lblHotelCity.setVisible(newVis);
        this.txtHotelCity.setVisible(newVis);
        
        this.lblHotelCountry.setVisible(newVis);
        this.txtHotelCountry.setVisible(newVis);
        
        this.lblContactNumber.setVisible(newVis);
        this.txtContactNumber.setVisible(newVis);
        
        this.lblEmailAddress.setVisible(newVis);
        this.txtEmailAddress.setVisible(newVis);
        
        if (newVis){
            if (this.getActionType().equals("Create")){
                this.btnCreateCommit.setVisible(newVis);
            }
            else if (this.getActionType().equals("Update")){
                this.btnCommitUpdate.setVisible(newVis);
            }
            else if (this.getActionType().equals("Delete")){
                this.btnDeleteRecord.setVisible(newVis);
            }
        }
        else {
            this.btnCommitUpdate.setVisible(newVis);
            this.btnDeleteRecord.setVisible(newVis);
            this.btnCreateCommit.setVisible(newVis);
        }
        
    }
    
    public boolean validateForm(){
        if (this.txtHotelName.getText().trim().length() == 0){
            getController().showPopup("Hotel name is a required field!");
            return false;
        }
        
        else if (this.txtHotelType.getText().trim().length() == 0){
            getController().showPopup("Hotel type is a required field!");
            return false;
        }
        
        else if (this.txtHotelYear.getText().trim().length() == 0){
            getController().showPopup("Hotel year is a required field!");
            return false;
        }
        
        else if (this.txtHotelCountry.getText().trim().length() == 0){
            getController().showPopup("Hotel country is a required field!");
            return false;
        }
        
        else if (this.txtHotelCity.getText().trim().length() == 0){
            getController().showPopup("Hotel city is a required field!");
            return false;
        }
        
        else if (this.txtHotelAddress.getText().trim().length() == 0){
            getController().showPopup("Hotel address is a required field!");
            return false;
        }
        
        else if (this.txtContactNumber.getText().trim().length() == 0){
            getController().showPopup("Hotel contact number is a required field!");
            return false;
        }
        
        else if (this.txtEmailAddress.getText().trim().length() == 0){
            getController().showPopup("Hotel email text is a required field!");
            return false;
        }
        
        else {
            return true;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCommitUpdate;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreateCommit;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteRecord;
    private javax.swing.JButton btnFindAction;
    private javax.swing.JButton btnFindByType;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboHotelType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContactNumber;
    private javax.swing.JLabel lblEmailAddress;
    private javax.swing.JLabel lblHotelAddress;
    private javax.swing.JLabel lblHotelCity;
    private javax.swing.JLabel lblHotelCountry;
    private javax.swing.JLabel lblHotelID;
    private javax.swing.JLabel lblHotelName;
    private javax.swing.JLabel lblHotelType;
    private javax.swing.JLabel lblHotelYear;
    private javax.swing.JLabel lblSearchCombo;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField txtActionID;
    private javax.swing.JTextField txtContactNumber;
    private javax.swing.JTextField txtEmailAddress;
    private javax.swing.JTextField txtHotelAddress;
    private javax.swing.JTextField txtHotelCity;
    private javax.swing.JTextField txtHotelCountry;
    private javax.swing.JTextField txtHotelID;
    private javax.swing.JTextField txtHotelName;
    private javax.swing.JTextField txtHotelType;
    private javax.swing.JTextField txtHotelYear;
    // End of variables declaration//GEN-END:variables
}
